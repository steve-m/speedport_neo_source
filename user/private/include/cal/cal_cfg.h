#ifndef _CAL_CFG_H_
#define _CAL_CFG_H_
#include "cal_DEF.h"

char* cfg_service_voiceNum_get();
int cfg_service_voiceNum_set(char* val);
char* cfg_service_voice_X_SC_DECT_Active_get();
int cfg_service_voice_X_SC_DECT_Active_set(char* val);
char* cfg_service_voice_X_SC_DECT_halb_get();
int cfg_service_voice_X_SC_DECT_halb_set(char* val);
char* cfg_service_voice_X_SC_DECT_Eco_Mode_get();
int cfg_service_voice_X_SC_DECT_Eco_Mode_set(char* val);
char* cfg_service_voice_X_SC_DECT_PIN_get();
int cfg_service_voice_X_SC_DECT_PIN_set(char* val);
char* cfg_service_voice_X_SC_RF19APU_MLSE_get();
int cfg_service_voice_X_SC_RF19APU_MLSE_set(char* val);
char* cfg_service_voice_X_SC_DECT_Adddect_get();
int cfg_service_voice_X_SC_DECT_Adddect_set(char* val);
char* cfg_voice_defaultLanguage_get(int id0);
int cfg_voice_defaultLanguage_set(int id0, char* val);
char* cfg_voice_NPNum_get(int id0);
int cfg_voice_NPNum_set(int id0, char* val);
char* cfg_voice_PINum_get(int id0);
int cfg_voice_PINum_set(int id0, char* val);
char* cfg_voice_EPNum_get(int id0);
int cfg_voice_EPNum_set(int id0, char* val);
char* cfg_voice_LinePrimaryKeyCount_get(int id0);
int cfg_voice_LinePrimaryKeyCount_set(int id0, char* val);
char* cfg_voice_AllNumberOfLine_get(int id0);
int cfg_voice_AllNumberOfLine_set(int id0, char* val);
char* cfg_voice_UsedGroupIdList_get(int id0);
int cfg_voice_UsedGroupIdList_set(int id0, char* val);
char* cfg_voice_AllNumberOfGroup_get(int id0);
int cfg_voice_AllNumberOfGroup_set(int id0, char* val);
char* cfg_voice_cap_maxNPCount_get(int id0);
int cfg_voice_cap_maxNPCount_set(int id0, char* val);
char* cfg_voice_cap_maxEPCount_get(int id0);
int cfg_voice_cap_maxEPCount_set(int id0, char* val);
char* cfg_voice_cap_maxLineCount_get(int id0);
int cfg_voice_cap_maxLineCount_set(int id0, char* val);
char* cfg_voice_cap_maxCallLogNum_get(int id0);
int cfg_voice_cap_maxCallLogNum_set(int id0, char* val);
char* cfg_voice_capAbl_codecs_packetizationPeriod_get(int id0, int id1);
int cfg_voice_capAbl_codecs_packetizationPeriod_set(int id0, int id1, char* val);
char* cfg_voice_capAbl_codecs_silenceSuppression_get(int id0, int id1);
int cfg_voice_capAbl_codecs_silenceSuppression_set(int id0, int id1, char* val);
char* cfg_voice_phyIntf_intfID_get(int id0, int id1);
int cfg_voice_phyIntf_intfID_set(int id0, int id1, char* val);
char* cfg_voice_phyIntf_desc_get(int id0, int id1);
int cfg_voice_phyIntf_desc_set(int id0, int id1, char* val);
char* cfg_voice_netProf_GroupList_get(int id0, int id1);
int cfg_voice_netProf_GroupList_set(int id0, int id1, char* val);
char* cfg_voice_netProf_enable_get(int id0, int id1);
int cfg_voice_netProf_enable_set(int id0, int id1, char* val);
char* cfg_voice_netProf_numLines_get(int id0, int id1);
int cfg_voice_netProf_numLines_set(int id0, int id1, char* val);
char* cfg_voice_netProf_name_get(int id0, int id1);
int cfg_voice_netProf_name_set(int id0, int id1, char* val);
char* cfg_voice_netProf_DTMFMethod_get(int id0, int id1);
int cfg_voice_netProf_DTMFMethod_set(int id0, int id1, char* val);
char* cfg_voice_netProf_STUNEnable_get(int id0, int id1);
int cfg_voice_netProf_STUNEnable_set(int id0, int id1, char* val);
char* cfg_voice_netProf_STUNServer_get(int id0, int id1);
int cfg_voice_netProf_STUNServer_set(int id0, int id1, char* val);
char* cfg_voice_netProf_faxPassThrough_get(int id0, int id1);
int cfg_voice_netProf_faxPassThrough_set(int id0, int id1, char* val);
char* cfg_voice_netProf_servPro_name_get(int id0, int id1);
int cfg_voice_netProf_servPro_name_set(int id0, int id1, char* val);
char* cfg_voice_netProf_servPro_URL_get(int id0, int id1);
int cfg_voice_netProf_servPro_URL_set(int id0, int id1, char* val);
char* cfg_voice_netProf_servPro_contactPhoneNumber_get(int id0, int id1);
int cfg_voice_netProf_servPro_contactPhoneNumber_set(int id0, int id1, char* val);
char* cfg_voice_netProf_servPro_emailAddress_get(int id0, int id1);
int cfg_voice_netProf_servPro_emailAddress_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_proxyServer_get(int id0, int id1);
int cfg_voice_netProf_sip_proxyServer_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_proxyServerPort_get(int id0, int id1);
int cfg_voice_netProf_sip_proxyServerPort_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_proxyServerTransport_get(int id0, int id1);
int cfg_voice_netProf_sip_proxyServerTransport_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_registrarServer_get(int id0, int id1);
int cfg_voice_netProf_sip_registrarServer_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_registrarServerPort_get(int id0, int id1);
int cfg_voice_netProf_sip_registrarServerPort_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_registrarServerTransport_get(int id0, int id1);
int cfg_voice_netProf_sip_registrarServerTransport_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_userAgentDomain_get(int id0, int id1);
int cfg_voice_netProf_sip_userAgentDomain_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_userAgentPort_get(int id0, int id1);
int cfg_voice_netProf_sip_userAgentPort_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_userAgentTransport_get(int id0, int id1);
int cfg_voice_netProf_sip_userAgentTransport_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_outboundProxy_get(int id0, int id1);
int cfg_voice_netProf_sip_outboundProxy_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_outboundProxyResolvedAddress_get(int id0, int id1);
int cfg_voice_netProf_sip_outboundProxyResolvedAddress_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_outboundProxyPort_get(int id0, int id1);
int cfg_voice_netProf_sip_outboundProxyPort_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_organization_get(int id0, int id1);
int cfg_voice_netProf_sip_organization_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_registerExpires_get(int id0, int id1);
int cfg_voice_netProf_sip_registerExpires_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_registerRetryInterval_get(int id0, int id1);
int cfg_voice_netProf_sip_registerRetryInterval_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sip_DSCPMark_get(int id0, int id1);
int cfg_voice_netProf_sip_DSCPMark_set(int id0, int id1, char* val);
char* cfg_voice_netProf_rtp_localPortMin_get(int id0, int id1);
int cfg_voice_netProf_rtp_localPortMin_set(int id0, int id1, char* val);
char* cfg_voice_netProf_rtp_DSCPMark_get(int id0, int id1);
int cfg_voice_netProf_rtp_DSCPMark_set(int id0, int id1, char* val);
char* cfg_voice_netProf_faxT38_enable_get(int id0, int id1);
int cfg_voice_netProf_faxT38_enable_set(int id0, int id1, char* val);
char* cfg_voice_netProf_faxT38_BitRate_get(int id0, int id1);
int cfg_voice_netProf_faxT38_BitRate_set(int id0, int id1, char* val);
char* cfg_voice_netProf_faxT38_highSpeedRedundancy_get(int id0, int id1);
int cfg_voice_netProf_faxT38_highSpeedRedundancy_set(int id0, int id1, char* val);
char* cfg_voice_netProf_faxT38_lowSpeedRedundancy_get(int id0, int id1);
int cfg_voice_netProf_faxT38_lowSpeedRedundancy_set(int id0, int id1, char* val);
char* cfg_voice_netProf_sipLine_LineID_get(int id0, int id1, int id2);
int cfg_voice_netProf_sipLine_LineID_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_sipLine_GroupID_get(int id0, int id1, int id2);
int cfg_voice_netProf_sipLine_GroupID_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_sip_authUserName_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_sip_authUserName_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_sip_authPassword_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_sip_authPassword_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_sip_uri_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_sip_uri_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_enable_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_enable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_LineID_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_LineID_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_GroupID_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_GroupID_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_directoryNumber_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_directoryNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_Name_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_Name_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_status_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_status_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_singleUse_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_singleUse_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_rejectWhenBusy_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_rejectWhenBusy_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_telephoneNumberHide_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_telephoneNumberHide_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_tr64index_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_tr64index_set(int id0, int id1, int id2, char* val);
char* cfg_voice_netProf_line_Stats_Reset_get(int id0, int id1, int id2);
int cfg_voice_netProf_line_Stats_Reset_set(int id0, int id1, int id2, char* val);
char* cfg_voice_line_callFea_callForwardUnconditionalEnablee_get(int id0, int id1, int id2);
int cfg_voice_line_callFea_callForwardUnconditionalEnablee_set(int id0, int id1, int id2, char* val);
char* cfg_voice_line_callFea_callForwardUnconditionalNumber_get(int id0, int id1, int id2);
int cfg_voice_line_callFea_callForwardUnconditionalNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_line_callFea_callForwardOnBusyEnable_get(int id0, int id1, int id2);
int cfg_voice_line_callFea_callForwardOnBusyEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_line_callFea_callForwardOnBusyNumber_get(int id0, int id1, int id2);
int cfg_voice_line_callFea_callForwardOnBusyNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_line_callFea_callForwardOnNoAnswerEnable_get(int id0, int id1, int id2);
int cfg_voice_line_callFea_callForwardOnNoAnswerEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_line_callFea_callForwardOnNoAnswerNumber_get(int id0, int id1, int id2);
int cfg_voice_line_callFea_callForwardOnNoAnswerNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_line_callFea_callForwardOnNoAnswerRingTimeout_get(int id0, int id1, int id2);
int cfg_voice_line_callFea_callForwardOnNoAnswerRingTimeout_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_enable_get(int id0, int id1);
int cfg_voice_extProf_enable_set(int id0, int id1, char* val);
char* cfg_voice_extProf_extNum_get(int id0, int id1);
int cfg_voice_extProf_extNum_set(int id0, int id1, char* val);
char* cfg_voice_extProf_name_get(int id0, int id1);
int cfg_voice_extProf_name_set(int id0, int id1, char* val);
char* cfg_voice_extProf_digitMap_get(int id0, int id1);
int cfg_voice_extProf_digitMap_set(int id0, int id1, char* val);
char* cfg_voice_extProf_dectFix_enable_get(int id0, int id1);
int cfg_voice_extProf_dectFix_enable_set(int id0, int id1, char* val);
char* cfg_voice_extProf_dect_encryption_get(int id0, int id1);
int cfg_voice_extProf_dect_encryption_set(int id0, int id1, char* val);
char* cfg_voice_extProf_dectFix_pin_get(int id0, int id1);
int cfg_voice_extProf_dectFix_pin_set(int id0, int id1, char* val);
char* cfg_voice_extProf_ext_name_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_name_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_extensionNumber_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_extensionNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_enable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_enable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_numberingPlanRef_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_numberingPlanRef_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_phyInterfaceRef_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_phyInterfaceRef_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_connDev_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_connDev_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_alternativeLineRef_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_alternativeLineRef_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_alternativeLineRefTwo_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_alternativeLineRefTwo_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callerIDEnable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callerIDEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callWaitingEnable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callWaitingEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callForwardUnconditionalEnablee_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callForwardUnconditionalEnablee_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callForwardUnconditionalNumber_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callForwardUnconditionalNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callForwardOnBusyEnable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callForwardOnBusyEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callForwardOnBusyNumber_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callForwardOnBusyNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callForwardOnNoAnswerEnable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callForwardOnNoAnswerEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callForwardOnNoAnswerNumber_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callForwardOnNoAnswerNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callForwardOnNoAnswerRingTimeout_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callForwardOnNoAnswerRingTimeout_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_callTransferEnable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_callTransferEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_MWIEnable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_MWIEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_messageWaiting_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_messageWaiting_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_anonymousCallBlockEnable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_anonymousCallBlockEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_doNotDisturbEnable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_doNotDisturbEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_callFea_voiceMailEnable_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_callFea_voiceMailEnable_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_voProc_txGain_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_voProc_txGain_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ext_voProc_rxGain_get(int id0, int id1, int id2);
int cfg_voice_extProf_ext_voProc_rxGain_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ourCont_entryid_get(int id0, int id1, int id2);
int cfg_voice_extProf_ourCont_entryid_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ourCont_name_get(int id0, int id1, int id2);
int cfg_voice_extProf_ourCont_name_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ourCont_firstName_get(int id0, int id1, int id2);
int cfg_voice_extProf_ourCont_firstName_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ourCont_privateTelephoneNumber_get(int id0, int id1, int id2);
int cfg_voice_extProf_ourCont_privateTelephoneNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ourCont_workTelephoneNumber_get(int id0, int id1, int id2);
int cfg_voice_extProf_ourCont_workTelephoneNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_ourCont_cellNumber_get(int id0, int id1, int id2);
int cfg_voice_extProf_ourCont_cellNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_email_retrievalInterval_get(int id0, int id1);
int cfg_voice_extProf_email_retrievalInterval_set(int id0, int id1, char* val);
char* cfg_voice_extProf_email_entryid_get(int id0, int id1, int id2);
int cfg_voice_extProf_email_entryid_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_email_accountName_get(int id0, int id1, int id2);
int cfg_voice_extProf_email_accountName_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_email_serverType_get(int id0, int id1, int id2);
int cfg_voice_extProf_email_serverType_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_email_requiresEncryption_get(int id0, int id1, int id2);
int cfg_voice_extProf_email_requiresEncryption_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_email_mailServer_get(int id0, int id1, int id2);
int cfg_voice_extProf_email_mailServer_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_email_serverPort_get(int id0, int id1, int id2);
int cfg_voice_extProf_email_serverPort_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_email_username_get(int id0, int id1, int id2);
int cfg_voice_extProf_email_username_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_email_password_get(int id0, int id1, int id2);
int cfg_voice_extProf_email_password_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_RSS_retrievalInterval_get(int id0, int id1);
int cfg_voice_extProf_RSS_retrievalInterval_set(int id0, int id1, char* val);
char* cfg_voice_extProf_rss_entryid_get(int id0, int id1, int id2);
int cfg_voice_extProf_rss_entryid_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_RSS_RSSFeedName_get(int id0, int id1, int id2);
int cfg_voice_extProf_RSS_RSSFeedName_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_RSS_RSSFeedURL_get(int id0, int id1, int id2);
int cfg_voice_extProf_RSS_RSSFeedURL_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_RSS_info_get(int id0, int id1, int id2);
int cfg_voice_extProf_RSS_info_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_online_phonebook_entryid_get(int id0, int id1, int id2);
int cfg_voice_extProf_online_phonebook_entryid_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_online_phonebook_addressBookName_get(int id0, int id1, int id2);
int cfg_voice_extProf_online_phonebook_addressBookName_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_online_phonebook_accountName_get(int id0, int id1, int id2);
int cfg_voice_extProf_online_phonebook_accountName_set(int id0, int id1, int id2, char* val);
char* cfg_voice_extProf_online_phonebook_password_get(int id0, int id1, int id2);
int cfg_voice_extProf_online_phonebook_password_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_inMapNum_get(int id0);
int cfg_voice_callCon_inMapNum_set(int id0, char* val);
char* cfg_voice_callCon_outMapNum_get(int id0);
int cfg_voice_callCon_outMapNum_set(int id0, char* val);
char* cfg_voice_callCon_callLogNum_get(int id0);
int cfg_voice_callCon_callLogNum_set(int id0, char* val);
char* cfg_voice_callCon_interDigitTimerStd_get(int id0);
int cfg_voice_callCon_interDigitTimerStd_set(int id0, char* val);
char* cfg_voice_callCon_inMap_entryID_get(int id0, int id1);
int cfg_voice_callCon_inMap_entryID_set(int id0, int id1, char* val);
char* cfg_voice_callCon_inMap_enable_get(int id0, int id1);
int cfg_voice_callCon_inMap_enable_set(int id0, int id1, char* val);
char* cfg_voice_callCon_inMap_lineRef_get(int id0, int id1);
int cfg_voice_callCon_inMap_lineRef_set(int id0, int id1, char* val);
char* cfg_voice_callCon_inMap_extensionRef_get(int id0, int id1);
int cfg_voice_callCon_inMap_extensionRef_set(int id0, int id1, char* val);
char* cfg_voice_callCon_outMap_entryID_get(int id0, int id1);
int cfg_voice_callCon_outMap_entryID_set(int id0, int id1, char* val);
char* cfg_voice_callCon_outMap_enable_get(int id0, int id1);
int cfg_voice_callCon_outMap_enable_set(int id0, int id1, char* val);
char* cfg_voice_callCon_outMap_extensionRef_get(int id0, int id1);
int cfg_voice_callCon_outMap_extensionRef_set(int id0, int id1, char* val);
char* cfg_voice_callCon_outMap_lineRef_get(int id0, int id1);
int cfg_voice_callCon_outMap_lineRef_set(int id0, int id1, char* val);
char* cfg_voice_callCon_callLog_callingPartyNumber_get(int id0, int id1);
int cfg_voice_callCon_callLog_callingPartyNumber_set(int id0, int id1, char* val);
char* cfg_voice_callCon_callLog_calledPartyNumber_get(int id0, int id1);
int cfg_voice_callCon_callLog_calledPartyNumber_set(int id0, int id1, char* val);
char* cfg_voice_callCon_callLog_start_get(int id0, int id1);
int cfg_voice_callCon_callLog_start_set(int id0, int id1, char* val);
char* cfg_voice_callCon_callLog_callTerminationCause_get(int id0, int id1);
int cfg_voice_callCon_callLog_callTerminationCause_set(int id0, int id1, char* val);
char* cfg_voice_callCon_callLog_session_Duration_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_Duration_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_codec_TxCodec_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_codec_TxCodec_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_codec_RxCodec_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_codec_RxCodec_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_codec_TxBitRate_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_codec_TxBitRate_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_codec_RxBitRate_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_codec_RxBitRate_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_codec_TxSilence_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_codec_TxSilence_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_codec_RxSilence_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_codec_RxSilence_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_codec_TxPacketizationPeriod_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_codec_TxPacketizationPeriod_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_PacketDelayVariation_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_PacketDelayVariation_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_BufferDelay_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_BufferDelay_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_BurstNumber_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_BurstNumber_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_BufferLost_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_BufferLost_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_PacketsReceived_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_PacketsReceived_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_PacketsLost_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_PacketsLost_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_Overruns_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_Overruns_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_Underruns_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_Underruns_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_AverageRoundTripDelay_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_AverageRoundTripDelay_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_X_T_ONLINE_DE_Echo_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_X_T_ONLINE_DE_Echo_set(int id0, int id1, int id2, char* val);
char* cfg_voice_callCon_callLog_session_rtp_X_T_ONLINE_DE_RQI_get(int id0, int id1, int id2);
int cfg_voice_callCon_callLog_session_rtp_X_T_ONLINE_DE_RQI_set(int id0, int id1, int id2, char* val);
char* cfg_voice_trunk_mapNum_get(int id0);
int cfg_voice_trunk_mapNum_set(int id0, char* val);
char* cfg_voice_trunk_map_entryID_get(int id0, int id1);
int cfg_voice_trunk_map_entryID_set(int id0, int id1, char* val);
char* cfg_voice_trunk_map_networkRef_get(int id0, int id1);
int cfg_voice_trunk_map_networkRef_set(int id0, int id1, char* val);
char* cfg_voice_trunk_map_extensionRef_get(int id0, int id1);
int cfg_voice_trunk_map_extensionRef_set(int id0, int id1, char* val);
char* cfg_voice_trunk_map_priority_get(int id0, int id1);
int cfg_voice_trunk_map_priority_set(int id0, int id1, char* val);
char* cfg_storage_ServiceEnable_get(int id0);
int cfg_storage_ServiceEnable_set(int id0, char* val);
char* cfg_storage_FTPCapable_get(int id0);
int cfg_storage_FTPCapable_set(int id0, char* val);
char* cfg_storage_SFTPCapable_get(int id0);
int cfg_storage_SFTPCapable_set(int id0, char* val);
char* cfg_storage_SupportedNetworkProtocols_get(int id0);
int cfg_storage_SupportedNetworkProtocols_set(int id0, char* val);
char* cfg_storage_SupportedFileSystemTypes_get(int id0);
int cfg_storage_SupportedFileSystemTypes_set(int id0, char* val);
char* cfg_storage_UserGroup_Enable_get(int id0, int id1);
int cfg_storage_UserGroup_Enable_set(int id0, int id1, char* val);
char* cfg_storage_UserGroup_GroupName_get(int id0, int id1);
int cfg_storage_UserGroup_GroupName_set(int id0, int id1, char* val);
typedef struct cfg_storage_UserGroup_s {
    char id[8];
    char Enable[4];
    char GroupName[65];
} cfg_storage_UserGroup_t;
int cfg_storage_UserGroup_tab_add(int id0, int id1);
int cfg_storage_UserGroup_tab_set(int id0, int id1, cfg_storage_UserGroup_t *p_cfg_storage_UserGroup);
int cfg_storage_UserGroup_tab_del(int id0, int id1);
int cfg_storage_UserGroup_tab_num_get(int id0, int **pp_index_array);
int cfg_storage_UserGroup_tab_get(int id0, int id1, cfg_storage_UserGroup_t **pp_cfg_storage_UserGroup);
char* cfg_storage_UserAccount_Enable_get(int id0, int id1);
int cfg_storage_UserAccount_Enable_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_Username_get(int id0, int id1);
int cfg_storage_UserAccount_Username_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_Password_get(int id0, int id1);
int cfg_storage_UserAccount_Password_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_UserGroupParticipation_get(int id0, int id1);
int cfg_storage_UserAccount_UserGroupParticipation_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_X_SC_Foldername1_get(int id0, int id1);
int cfg_storage_UserAccount_X_SC_Foldername1_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_X_SC_Permission1_get(int id0, int id1);
int cfg_storage_UserAccount_X_SC_Permission1_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_X_SC_Foldername2_get(int id0, int id1);
int cfg_storage_UserAccount_X_SC_Foldername2_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_X_SC_Permission2_get(int id0, int id1);
int cfg_storage_UserAccount_X_SC_Permission2_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_AllowFTPAccess_get(int id0, int id1);
int cfg_storage_UserAccount_AllowFTPAccess_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_X_SC_AllowFTPAccessRemote_get(int id0, int id1);
int cfg_storage_UserAccount_X_SC_AllowFTPAccessRemote_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_X_SC_AllowSFTPAccess_get(int id0, int id1);
int cfg_storage_UserAccount_X_SC_AllowSFTPAccess_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_X_SC_AllowSFTPAccessRemote_get(int id0, int id1);
int cfg_storage_UserAccount_X_SC_AllowSFTPAccessRemote_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_AllowHTTPAccess_get(int id0, int id1);
int cfg_storage_UserAccount_AllowHTTPAccess_set(int id0, int id1, char* val);
char* cfg_storage_UserAccount_HomeDir_get(int id0, int id1);
int cfg_storage_UserAccount_HomeDir_set(int id0, int id1, char* val);
typedef struct cfg_storage_UserAccount_s {
    char id[8];
    char Enable[4];
    char Username[65];
    char Password[65];
    char UserGroupParticipation[1025];
    char X_SC_Foldername1[257];
    char X_SC_Permission1[16];
    char X_SC_Foldername2[257];
    char X_SC_Permission2[16];
    char AllowFTPAccess[4];
    char X_SC_AllowFTPAccessRemote[4];
    char X_SC_AllowSFTPAccess[4];
    char X_SC_AllowSFTPAccessRemote[4];
    char AllowHTTPAccess[4];
    char HomeDir[257];
} cfg_storage_UserAccount_t;
int cfg_storage_UserAccount_tab_add(int id0, int id1);
int cfg_storage_UserAccount_tab_set(int id0, int id1, cfg_storage_UserAccount_t *p_cfg_storage_UserAccount);
int cfg_storage_UserAccount_tab_del(int id0, int id1);
int cfg_storage_UserAccount_tab_num_get(int id0, int **pp_index_array);
int cfg_storage_UserAccount_tab_get(int id0, int id1, cfg_storage_UserAccount_t **pp_cfg_storage_UserAccount);
char* cfg_storage_SMBEnable_get(int id0);
int cfg_storage_SMBEnable_set(int id0, char* val);
char* cfg_storage_SMBWorkgroup_get(int id0);
int cfg_storage_SMBWorkgroup_set(int id0, char* val);
char* cfg_storage_SMBServerName_get(int id0);
int cfg_storage_SMBServerName_set(int id0, char* val);
char* cfg_storage_FTPServerEnable_get(int id0);
int cfg_storage_FTPServerEnable_set(int id0, char* val);
char* cfg_storage_FTPMaxNumUsers_get(int id0);
int cfg_storage_FTPMaxNumUsers_set(int id0, char* val);
char* cfg_storage_FTPPortNumber_get(int id0);
int cfg_storage_FTPPortNumber_set(int id0, char* val);
char* cfg_storage_FTPServerRemoteAccess_get(int id0);
int cfg_storage_FTPServerRemoteAccess_set(int id0, char* val);
char* cfg_storage_AnonymousUserEnable_get(int id0);
int cfg_storage_AnonymousUserEnable_set(int id0, char* val);
char* cfg_storage_AnonymousUserStartFolder_get(int id0);
int cfg_storage_AnonymousUserStartFolder_set(int id0, char* val);
char* cfg_storage_AnonymousUserReadOnlyAccess_get(int id0);
int cfg_storage_AnonymousUserReadOnlyAccess_set(int id0, char* val);
char* cfg_storage_SFTPServerEnable_get(int id0);
int cfg_storage_SFTPServerEnable_set(int id0, char* val);
char* cfg_storage_SFTPServerMaxNumUsers_get(int id0);
int cfg_storage_SFTPServerMaxNumUsers_set(int id0, char* val);
char* cfg_storage_SFTPServerPortNumber_get(int id0);
int cfg_storage_SFTPServerPortNumber_set(int id0, char* val);
char* cfg_storage_RemoteAccess_get(int id0);
int cfg_storage_RemoteAccess_set(int id0, char* val);
char* cfg_storage_SFTPServerRemoteAccess_get(int id0);
int cfg_storage_SFTPServerRemoteAccess_set(int id0, char* val);
char* cfg_storage_PhysicalMedium_Name_get(int id0, int id1);
int cfg_storage_PhysicalMedium_Name_set(int id0, int id1, char* val);
char* cfg_storage_PhysicalMedium_Vendor_get(int id0, int id1);
int cfg_storage_PhysicalMedium_Vendor_set(int id0, int id1, char* val);
char* cfg_storage_PhysicalMedium_Model_get(int id0, int id1);
int cfg_storage_PhysicalMedium_Model_set(int id0, int id1, char* val);
char* cfg_storage_PhysicalMedium_SerialNumber_get(int id0, int id1);
int cfg_storage_PhysicalMedium_SerialNumber_set(int id0, int id1, char* val);
char* cfg_storage_PhysicalMedium_Removable_get(int id0, int id1);
int cfg_storage_PhysicalMedium_Removable_set(int id0, int id1, char* val);
char* cfg_storage_PhysicalMedium_Capacity_get(int id0, int id1);
int cfg_storage_PhysicalMedium_Capacity_set(int id0, int id1, char* val);
char* cfg_storage_PhysicalMedium_Index_get(int id0, int id1);
int cfg_storage_PhysicalMedium_Index_set(int id0, int id1, char* val);
typedef struct cfg_storage_PhysicalMedium_s {
    char id[8];
    char Name[65];
    char Vendor[65];
    char Model[129];
    char SerialNumber[65];
    char Removable[4];
    char Capacity[16];
    char Index[16];
} cfg_storage_PhysicalMedium_t;
int cfg_storage_PhysicalMedium_tab_add(int id0, int id1);
int cfg_storage_PhysicalMedium_tab_set(int id0, int id1, cfg_storage_PhysicalMedium_t *p_cfg_storage_PhysicalMedium);
int cfg_storage_PhysicalMedium_tab_del(int id0, int id1);
int cfg_storage_PhysicalMedium_tab_num_get(int id0, int **pp_index_array);
int cfg_storage_PhysicalMedium_tab_get(int id0, int id1, cfg_storage_PhysicalMedium_t **pp_cfg_storage_PhysicalMedium);
char* cfg_storage_StorageArray_Name_get(int id0, int id1);
int cfg_storage_StorageArray_Name_set(int id0, int id1, char* val);
char* cfg_storage_StorageArray_SerialNumber_get(int id0, int id1);
int cfg_storage_StorageArray_SerialNumber_set(int id0, int id1, char* val);
char* cfg_storage_StorageArray_PhysicalMediumReference_get(int id0, int id1);
int cfg_storage_StorageArray_PhysicalMediumReference_set(int id0, int id1, char* val);
typedef struct cfg_storage_StorageArray_s {
    char id[8];
    char Name[65];
    char SerialNumber[65];
    char PhysicalMediumReference[1025];
} cfg_storage_StorageArray_t;
int cfg_storage_StorageArray_tab_add(int id0, int id1);
int cfg_storage_StorageArray_tab_set(int id0, int id1, cfg_storage_StorageArray_t *p_cfg_storage_StorageArray);
int cfg_storage_StorageArray_tab_del(int id0, int id1);
int cfg_storage_StorageArray_tab_num_get(int id0, int **pp_index_array);
int cfg_storage_StorageArray_tab_get(int id0, int id1, cfg_storage_StorageArray_t **pp_cfg_storage_StorageArray);
char* cfg_storage_LogicalVolume_Name_get(int id0, int id1);
int cfg_storage_LogicalVolume_Name_set(int id0, int id1, char* val);
char* cfg_storage_LogicalVolume_Enable_get(int id0, int id1);
int cfg_storage_LogicalVolume_Enable_set(int id0, int id1, char* val);
char* cfg_storage_LogicalVolume_PhysicalReference_get(int id0, int id1);
int cfg_storage_LogicalVolume_PhysicalReference_set(int id0, int id1, char* val);
char* cfg_storage_LogicalVolume_FileSystem_get(int id0, int id1);
int cfg_storage_LogicalVolume_FileSystem_set(int id0, int id1, char* val);
char* cfg_storage_LogicalVolume_Capacity_get(int id0, int id1);
int cfg_storage_LogicalVolume_Capacity_set(int id0, int id1, char* val);
char* cfg_storage_LogicalVolume_UsedSpace_get(int id0, int id1);
int cfg_storage_LogicalVolume_UsedSpace_set(int id0, int id1, char* val);
typedef struct cfg_storage_LogicalVolume_s {
    char id[8];
    char Name[65];
    char Enable[4];
    char PhysicalReference[257];
    char FileSystem[513];
    char Capacity[16];
    char UsedSpace[16];
} cfg_storage_LogicalVolume_t;
int cfg_storage_LogicalVolume_tab_add(int id0, int id1);
int cfg_storage_LogicalVolume_tab_set(int id0, int id1, cfg_storage_LogicalVolume_t *p_cfg_storage_LogicalVolume);
int cfg_storage_LogicalVolume_tab_del(int id0, int id1);
int cfg_storage_LogicalVolume_tab_num_get(int id0, int **pp_index_array);
int cfg_storage_LogicalVolume_tab_get(int id0, int id1, cfg_storage_LogicalVolume_t **pp_cfg_storage_LogicalVolume);
char* cfg_storage_Folder_Name_get(int id0, int id1, int id2);
int cfg_storage_Folder_Name_set(int id0, int id1, int id2, char* val);
char* cfg_storage_Folder_Enable_get(int id0, int id1, int id2);
int cfg_storage_Folder_Enable_set(int id0, int id1, int id2, char* val);
char* cfg_storage_Folder_UserAccountAccess_get(int id0, int id1, int id2);
int cfg_storage_Folder_UserAccountAccess_set(int id0, int id1, int id2, char* val);
typedef struct cfg_storage_Folder_s {
    char id[8];
    char Name[65];
    char Enable[4];
    char UserAccountAccess[16];
} cfg_storage_Folder_t;
int cfg_storage_Folder_tab_add(int id0, int id1, int id2);
int cfg_storage_Folder_tab_set(int id0, int id1, int id2, cfg_storage_Folder_t *p_cfg_storage_Folder);
int cfg_storage_Folder_tab_del(int id0, int id1, int id2);
int cfg_storage_Folder_tab_num_get(int id0, int id1, int **pp_index_array);
int cfg_storage_Folder_tab_get(int id0, int id1, int id2, cfg_storage_Folder_t **pp_cfg_storage_Folder);
char* cfg_storage_FolderUserAccess_Enable_get(int id0, int id1, int id2, int id3);
int cfg_storage_FolderUserAccess_Enable_set(int id0, int id1, int id2, int id3, char* val);
char* cfg_storage_FolderUserAccess_Permissions_get(int id0, int id1, int id2, int id3);
int cfg_storage_FolderUserAccess_Permissions_set(int id0, int id1, int id2, int id3, char* val);
typedef struct cfg_storage_FolderUserAccess_s {
    char id[8];
    char Enable[4];
    char Permissions[16];
} cfg_storage_FolderUserAccess_t;
int cfg_storage_FolderUserAccess_tab_add(int id0, int id1, int id2, int id3);
int cfg_storage_FolderUserAccess_tab_set(int id0, int id1, int id2, int id3, cfg_storage_FolderUserAccess_t *p_cfg_storage_FolderUserAccess);
int cfg_storage_FolderUserAccess_tab_del(int id0, int id1, int id2, int id3);
int cfg_storage_FolderUserAccess_tab_num_get(int id0, int id1, int id2, int **pp_index_array);
int cfg_storage_FolderUserAccess_tab_get(int id0, int id1, int id2, int id3, cfg_storage_FolderUserAccess_t **pp_cfg_storage_FolderUserAccess);
char* cfg_storage_FolderGroupAccess_Enable_get(int id0, int id1, int id2, int id3);
int cfg_storage_FolderGroupAccess_Enable_set(int id0, int id1, int id2, int id3, char* val);
char* cfg_storage_FolderGroupAccess_Permissions_get(int id0, int id1, int id2, int id3);
int cfg_storage_FolderGroupAccess_Permissions_set(int id0, int id1, int id2, int id3, char* val);
typedef struct cfg_storage_FolderGroupAccess_s {
    char id[8];
    char Enable[4];
    char Permissions[16];
} cfg_storage_FolderGroupAccess_t;
int cfg_storage_FolderGroupAccess_tab_add(int id0, int id1, int id2, int id3);
int cfg_storage_FolderGroupAccess_tab_set(int id0, int id1, int id2, int id3, cfg_storage_FolderGroupAccess_t *p_cfg_storage_FolderGroupAccess);
int cfg_storage_FolderGroupAccess_tab_del(int id0, int id1, int id2, int id3);
int cfg_storage_FolderGroupAccess_tab_num_get(int id0, int id1, int id2, int **pp_index_array);
int cfg_storage_FolderGroupAccess_tab_get(int id0, int id1, int id2, int id3, cfg_storage_FolderGroupAccess_t **pp_cfg_storage_FolderGroupAccess);
char* cfg_storage_FolderQuota_Enable_get(int id0, int id1, int id2);
int cfg_storage_FolderQuota_Enable_set(int id0, int id1, int id2, char* val);
char* cfg_storage_FolderQuota_Capacity_get(int id0, int id1, int id2);
int cfg_storage_FolderQuota_Capacity_set(int id0, int id1, int id2, char* val);
char* cfg_storage_FolderQuota_UsedSpace_get(int id0, int id1, int id2);
int cfg_storage_FolderQuota_UsedSpace_set(int id0, int id1, int id2, char* val);
char* cfg_storage_Mediacenter_Enable_get(int id0);
int cfg_storage_Mediacenter_Enable_set(int id0, char* val);
char* cfg_storage_Mediacenter_Username_get(int id0);
int cfg_storage_Mediacenter_Username_set(int id0, char* val);
char* cfg_storage_Mediacenter_Password_get(int id0);
int cfg_storage_Mediacenter_Password_set(int id0, char* val);
char* cfg_storage_Synch_Name_get(int id0, int id1);
int cfg_storage_Synch_Name_set(int id0, int id1, char* val);
char* cfg_storage_Synch_Active_get(int id0, int id1);
int cfg_storage_Synch_Active_set(int id0, int id1, char* val);
char* cfg_storage_Synch_SyncFolder1_get(int id0, int id1);
int cfg_storage_Synch_SyncFolder1_set(int id0, int id1, char* val);
char* cfg_storage_Synch_SyncSerial1_get(int id0, int id1);
int cfg_storage_Synch_SyncSerial1_set(int id0, int id1, char* val);
char* cfg_storage_Synch_SyncFolder2_get(int id0, int id1);
int cfg_storage_Synch_SyncFolder2_set(int id0, int id1, char* val);
char* cfg_storage_Synch_SyncSerial2_get(int id0, int id1);
int cfg_storage_Synch_SyncSerial2_set(int id0, int id1, char* val);
char* cfg_storage_Synch_SyncMethod_get(int id0, int id1);
int cfg_storage_Synch_SyncMethod_set(int id0, int id1, char* val);
char* cfg_storage_Synch_SyncSchdule_get(int id0, int id1);
int cfg_storage_Synch_SyncSchdule_set(int id0, int id1, char* val);
char* cfg_storage_Synch_SyncState_get(int id0, int id1);
int cfg_storage_Synch_SyncState_set(int id0, int id1, char* val);
typedef struct cfg_storage_Synch_s {
    char id[8];
    char Name[65];
    char SyncActive[4];
    char SyncFolder1[257];
    char SyncSerial1[65];
    char SyncFolder2[257];
    char SyncSerial2[65];
    char SyncMethod[16];
    char SyncSchdule[513];
    char SyncSate[16];
} cfg_storage_Synch_t;
int cfg_storage_Synch_tab_add(int id0, int id1);
int cfg_storage_Synch_tab_set(int id0, int id1, cfg_storage_Synch_t *p_cfg_storage_Synch);
int cfg_storage_Synch_tab_del(int id0, int id1);
int cfg_storage_Synch_tab_num_get(int id0, int **pp_index_array);
int cfg_storage_Synch_tab_get(int id0, int id1, cfg_storage_Synch_t **pp_cfg_storage_Synch);
char* cfg_storage_Backup_Name_get(int id0, int id1);
int cfg_storage_Backup_Name_set(int id0, int id1, char* val);
char* cfg_storage_Backup_Active_get(int id0, int id1);
int cfg_storage_Backup_Active_set(int id0, int id1, char* val);
char* cfg_storage_Backup_SourceFolder_get(int id0, int id1);
int cfg_storage_Backup_SourceFolder_set(int id0, int id1, char* val);
char* cfg_storage_Backup_SourceSerial_get(int id0, int id1);
int cfg_storage_Backup_SourceSerial_set(int id0, int id1, char* val);
char* cfg_storage_Backup_TargetFolder_get(int id0, int id1);
int cfg_storage_Backup_TargetFolder_set(int id0, int id1, char* val);
char* cfg_storage_Backup_TargetSerial_get(int id0, int id1);
int cfg_storage_Backup_TargetSerial_set(int id0, int id1, char* val);
char* cfg_storage_Backup_BackupMethod_get(int id0, int id1);
int cfg_storage_Backup_BackupMethod_set(int id0, int id1, char* val);
char* cfg_storage_Backup_BackupSchedule_get(int id0, int id1);
int cfg_storage_Backup_BackupSchedule_set(int id0, int id1, char* val);
char* cfg_storage_Backup_Versioning_get(int id0, int id1);
int cfg_storage_Backup_Versioning_set(int id0, int id1, char* val);
char* cfg_storage_Backup_BackupState_get(int id0, int id1);
int cfg_storage_Backup_BackupState_set(int id0, int id1, char* val);
typedef struct cfg_storage_Backup_s {
    char id[8];
    char Name[65];
    char BackupActive[4];
    char SourceFolder[257];
    char SourceSerial[65];
    char TargetFolder[257];
    char TargetSerial[65];
    char BackupMethod[16];
    char BackupSchedule[513];
    char Versioning[4];
    char BackupState[16];
} cfg_storage_Backup_t;
int cfg_storage_Backup_tab_add(int id0, int id1);
int cfg_storage_Backup_tab_set(int id0, int id1, cfg_storage_Backup_t *p_cfg_storage_Backup);
int cfg_storage_Backup_tab_del(int id0, int id1);
int cfg_storage_Backup_tab_num_get(int id0, int **pp_index_array);
int cfg_storage_Backup_tab_get(int id0, int id1, cfg_storage_Backup_t **pp_cfg_storage_Backup);
char* cfg_storage_Restore_Name_get(int id0, int id1);
int cfg_storage_Restore_Name_set(int id0, int id1, char* val);
typedef struct cfg_storage_Restore_s {
    char id[8];
    char Name[257];
} cfg_storage_Restore_t;
int cfg_storage_Restore_tab_add(int id0, int id1);
int cfg_storage_Restore_tab_set(int id0, int id1, cfg_storage_Restore_t *p_cfg_storage_Restore);
int cfg_storage_Restore_tab_del(int id0, int id1);
int cfg_storage_Restore_tab_num_get(int id0, int **pp_index_array);
int cfg_storage_Restore_tab_get(int id0, int id1, cfg_storage_Restore_t **pp_cfg_storage_Restore);
char* cfg_storage_MediaServer_Active_get(int id0, int id1);
int cfg_storage_MediaServer_Active_set(int id0, int id1, char* val);
char* cfg_storage_MediaServer_Name_get(int id0, int id1);
int cfg_storage_MediaServer_Name_set(int id0, int id1, char* val);
char* cfg_storage_MediaServer_Folder_get(int id0, int id1);
int cfg_storage_MediaServer_Folder_set(int id0, int id1, char* val);
typedef struct cfg_storage_MediaServer_s {
    char id[8];
    char Active[4];
    char Name[65];
    char Folder[257];
} cfg_storage_MediaServer_t;
int cfg_storage_MediaServer_tab_add(int id0, int id1);
int cfg_storage_MediaServer_tab_set(int id0, int id1, cfg_storage_MediaServer_t *p_cfg_storage_MediaServer);
int cfg_storage_MediaServer_tab_del(int id0, int id1);
int cfg_storage_MediaServer_tab_num_get(int id0, int **pp_index_array);
int cfg_storage_MediaServer_tab_get(int id0, int id1, cfg_storage_MediaServer_t **pp_cfg_storage_MediaServer);
char* cfg_storage_EmailAccountProvider_get(int id0);
int cfg_storage_EmailAccountProvider_set(int id0, char* val);
char* cfg_storage_EmailSMTP_get(int id0);
int cfg_storage_EmailSMTP_set(int id0, char* val);
char* cfg_storage_EmailSMTPEncrypted_get(int id0);
int cfg_storage_EmailSMTPEncrypted_set(int id0, char* val);
char* cfg_storage_EmailPort_get(int id0);
int cfg_storage_EmailPort_set(int id0, char* val);
char* cfg_storage_Email_t_Username_get(int id0);
int cfg_storage_Email_t_Username_set(int id0, char* val);
char* cfg_storage_Email_other_Username_get(int id0);
int cfg_storage_Email_other_Username_set(int id0, char* val);
char* cfg_storage_EmailPassword_get(int id0);
int cfg_storage_EmailPassword_set(int id0, char* val);
char* cfg_storage_EmailAddress_get(int id0);
int cfg_storage_EmailAddress_set(int id0, char* val);
char* cfg_storage_EmailEvent_get(int id0);
int cfg_storage_EmailEvent_set(int id0, char* val);
char* cfg_service_bulkdata_enable_get();
int cfg_service_bulkdata_enable_set(char* val);
char* cfg_service_bulkdata_status_get();
int cfg_service_bulkdata_status_set(char* val);
char* cfg_service_bulkdata_report_interval_get();
int cfg_service_bulkdata_report_interval_set(char* val);
char* cfg_service_bulkdata_protocol_get();
int cfg_service_bulkdata_protocol_set(char* val);
char* cfg_service_bulkdata_encode_type_get();
int cfg_service_bulkdata_encode_type_set(char* val);
char* cfg_service_bulkdata_profile_Enable_get(int id0);
int cfg_service_bulkdata_profile_Enable_set(int id0, char* val);
char* cfg_service_bulkdata_profile_Alias_get(int id0);
int cfg_service_bulkdata_profile_Alias_set(int id0, char* val);
char* cfg_service_bulkdata_profile_Protocol_get(int id0);
int cfg_service_bulkdata_profile_Protocol_set(int id0, char* val);
char* cfg_service_bulkdata_profile_EncodingType_get(int id0);
int cfg_service_bulkdata_profile_EncodingType_set(int id0, char* val);
char* cfg_service_bulkdata_profile_ReportingInterval_get(int id0);
int cfg_service_bulkdata_profile_ReportingInterval_set(int id0, char* val);
char* cfg_service_bulkdata_profile_TimeReference_get(int id0);
int cfg_service_bulkdata_profile_TimeReference_set(int id0, char* val);
char* cfg_service_bulkdata_profile_StreamingHost_get(int id0);
int cfg_service_bulkdata_profile_StreamingHost_set(int id0, char* val);
char* cfg_service_bulkdata_profile_StreamingPort_get(int id0);
int cfg_service_bulkdata_profile_StreamingPort_set(int id0, char* val);
char* cfg_service_bulkdata_profile_StreamingSessionID_get(int id0);
int cfg_service_bulkdata_profile_StreamingSessionID_set(int id0, char* val);
char* cfg_service_bulkdata_profile_FileTransferURL_get(int id0);
int cfg_service_bulkdata_profile_FileTransferURL_set(int id0, char* val);
char* cfg_service_bulkdata_profile_FileTransferUsername_get(int id0);
int cfg_service_bulkdata_profile_FileTransferUsername_set(int id0, char* val);
char* cfg_service_bulkdata_profile_FileTransferPassword_get(int id0);
int cfg_service_bulkdata_profile_FileTransferPassword_set(int id0, char* val);
char* cfg_service_bulkdata_profile_ControlFileFormat_get(int id0);
int cfg_service_bulkdata_profile_ControlFileFormat_set(int id0, char* val);
typedef struct cfg_service_bulkdata_profile_s {
    char id[8];
    char Enable[4];
    char Alias[65];
    char Protocol[513];
    char EncodingType[513];
    char ReportingInterval[16];
    char TimeReference[257];
    char StreamingHost[257];
    char StreamingPort[16];
    char StreamingSessionID[16];
    char FileTransferURL[257];
    char FileTransferUsername[65];
    char FileTransferPassword[65];
    char ControlFileFormat[129];
} cfg_service_bulkdata_profile_t;
int cfg_service_bulkdata_profile_tab_add(int id0);
int cfg_service_bulkdata_profile_tab_set(int id0, cfg_service_bulkdata_profile_t *p_cfg_service_bulkdata_profile);
int cfg_service_bulkdata_profile_tab_del(int id0);
int cfg_service_bulkdata_profile_tab_num_get(int **pp_index_array);
int cfg_service_bulkdata_profile_tab_get(int id0, cfg_service_bulkdata_profile_t **pp_cfg_service_bulkdata_profile);
char* cfg_service_bulkdata_profile_prameter_Reference_get(int id0, int id1);
int cfg_service_bulkdata_profile_prameter_Reference_set(int id0, int id1, char* val);
typedef struct cfg_service_bulkdata_profile_prameter_s {
    char id[8];
    char Reference[257];
} cfg_service_bulkdata_profile_prameter_t;
int cfg_service_bulkdata_profile_prameter_tab_add(int id0, int id1);
int cfg_service_bulkdata_profile_prameter_tab_set(int id0, int id1, cfg_service_bulkdata_profile_prameter_t *p_cfg_service_bulkdata_profile_prameter);
int cfg_service_bulkdata_profile_prameter_tab_del(int id0, int id1);
int cfg_service_bulkdata_profile_prameter_tab_num_get(int id0, int **pp_index_array);
int cfg_service_bulkdata_profile_prameter_tab_get(int id0, int id1, cfg_service_bulkdata_profile_prameter_t **pp_cfg_service_bulkdata_profile_prameter);
char* cfg_smtpservers_TrustedSMTPServers_Enable_get();
int cfg_smtpservers_TrustedSMTPServers_Enable_set(char* val);
char* cfg_smtpservers_TrustedSMTPServers_UpdateURL_get();
int cfg_smtpservers_TrustedSMTPServers_UpdateURL_set(char* val);
char* cfg_smtpservers_TrustedSMTPServers_LastUpdated_get();
int cfg_smtpservers_TrustedSMTPServers_LastUpdated_set(char* val);
char* cfg_smtpservers_TrustedSMTPServers_IWAVersion_get();
int cfg_smtpservers_TrustedSMTPServers_IWAVersion_set(char* val);
char* cfg_smtpservers_TrustedSMTPServers_updateInterval_get();
int cfg_smtpservers_TrustedSMTPServers_updateInterval_set(char* val);
char* cfg_smtpservers_TrustedSMTPServers_user_wlist_Enable_get(int id0);
int cfg_smtpservers_TrustedSMTPServers_user_wlist_Enable_set(int id0, char* val);
char* cfg_smtpservers_TrustedSMTPServers_user_wlist_FQDN_get(int id0);
int cfg_smtpservers_TrustedSMTPServers_user_wlist_FQDN_set(int id0, char* val);
typedef struct cfg_smtpservers_TrustedSMTPServers_user_wlist_s {
    char id[8];
    char Enable[4];
    char FQDN[1025];
} cfg_smtpservers_TrustedSMTPServers_user_wlist_t;
int cfg_smtpservers_TrustedSMTPServers_user_wlist_tab_add(int id0);
int cfg_smtpservers_TrustedSMTPServers_user_wlist_tab_set(int id0, cfg_smtpservers_TrustedSMTPServers_user_wlist_t *p_cfg_smtpservers_TrustedSMTPServers_user_wlist);
int cfg_smtpservers_TrustedSMTPServers_user_wlist_tab_del(int id0);
int cfg_smtpservers_TrustedSMTPServers_user_wlist_tab_num_get(int **pp_index_array);
int cfg_smtpservers_TrustedSMTPServers_user_wlist_tab_get(int id0, cfg_smtpservers_TrustedSMTPServers_user_wlist_t **pp_cfg_smtpservers_TrustedSMTPServers_user_wlist);
char* cfg_wanaccess_WANAccess_WANAccessType_get();
int cfg_wanaccess_WANAccess_WANAccessType_set(char* val);
char* cfg_wanaccess_WANAccess_AccessInterfaceRef_get();
int cfg_wanaccess_WANAccess_AccessInterfaceRef_set(char* val);
char* cfg_wanaccess_WANAccess_DSLModemEnable_get();
int cfg_wanaccess_WANAccess_DSLModemEnable_set(char* val);
char* cfg_devinfo_Manufacturer_get();
int cfg_devinfo_Manufacturer_set(char* val);
char* cfg_devinfo_ManufacturerOUI_get();
int cfg_devinfo_ManufacturerOUI_set(char* val);
char* cfg_devinfo_ModelName_get();
int cfg_devinfo_ModelName_set(char* val);
char* cfg_devinfo_Description_get();
int cfg_devinfo_Description_set(char* val);
char* cfg_devinfo_ProductClass_get();
int cfg_devinfo_ProductClass_set(char* val);
char* cfg_devinfo_SerialNumber_get();
int cfg_devinfo_SerialNumber_set(char* val);
char* cfg_devinfo_HardwareVersion_get();
int cfg_devinfo_HardwareVersion_set(char* val);
char* cfg_devinfo_SoftwareVersion_get();
int cfg_devinfo_SoftwareVersion_set(char* val);
char* cfg_devinfo_X_SC_BootCodeVersion_get();
int cfg_devinfo_X_SC_BootCodeVersion_set(char* val);
char* cfg_devinfo_X_SC_Volume_Level_get();
int cfg_devinfo_X_SC_Volume_Level_set(char* val);
char* cfg_devinfo_ProvisioningCode_get();
int cfg_devinfo_ProvisioningCode_set(char* val);
char* cfg_devinfo_UpTime_get();
int cfg_devinfo_UpTime_set(char* val);
char* cfg_devinfo_DeviceLog_get();
int cfg_devinfo_DeviceLog_set(char* val);
char* cfg_devinfo_TR064SpecVersion_get();
int cfg_devinfo_TR064SpecVersion_set(char* val);
char* cfg_devinfo_TR064SecurityPort_get();
int cfg_devinfo_TR064SecurityPort_set(char* val);
char* cfg_devinfo_process_entry_PID_get(int id0);
int cfg_devinfo_process_entry_PID_set(int id0, char* val);
char* cfg_devinfo_process_entry_Command_get(int id0);
int cfg_devinfo_process_entry_Command_set(int id0, char* val);
char* cfg_devinfo_process_entry_Size_get(int id0);
int cfg_devinfo_process_entry_Size_set(int id0, char* val);
char* cfg_devinfo_process_entry_Priority_get(int id0);
int cfg_devinfo_process_entry_Priority_set(int id0, char* val);
char* cfg_devinfo_process_entry_CPUTime_get(int id0);
int cfg_devinfo_process_entry_CPUTime_set(int id0, char* val);
char* cfg_devinfo_process_entry_State_get(int id0);
int cfg_devinfo_process_entry_State_set(int id0, char* val);
typedef struct cfg_devinfo_process_entry_s {
    char id[8];
    char PID[16];
    char Command[257];
    char Size[16];
    char Priority[16];
    char CPUTime[16];
    char State[513];
} cfg_devinfo_process_entry_t;
int cfg_devinfo_process_entry_tab_add(int id0);
int cfg_devinfo_process_entry_tab_set(int id0, cfg_devinfo_process_entry_t *p_cfg_devinfo_process_entry);
int cfg_devinfo_process_entry_tab_del(int id0);
int cfg_devinfo_process_entry_tab_num_get(int **pp_index_array);
int cfg_devinfo_process_entry_tab_get(int id0, cfg_devinfo_process_entry_t **pp_cfg_devinfo_process_entry);
char* cfg_Management_enable_get();
int cfg_Management_enable_set(char* val);
char* cfg_management_AK_URL_get();
int cfg_management_AK_URL_set(char* val);
char* cfg_management_SAM_URL_get();
int cfg_management_SAM_URL_set(char* val);
char* cfg_management_SAM_Redirect_URL_get();
int cfg_management_SAM_Redirect_URL_set(char* val);
char* cfg_management_SAM_AppID_get();
int cfg_management_SAM_AppID_set(char* val);
char* cfg_management_SAM_AppPwd_get();
int cfg_management_SAM_AppPwd_set(char* val);
char* cfg_management_Lexus_AppID_get();
int cfg_management_Lexus_AppID_set(char* val);
char* cfg_management_Lexus_AppPwd_get();
int cfg_management_Lexus_AppPwd_set(char* val);
char* cfg_management_AK_Timeout_get();
int cfg_management_AK_Timeout_set(char* val);
char* cfg_management_HALP_State_get();
int cfg_management_HALP_State_set(char* val);
char* cfg_Management_URL_get();
int cfg_Management_URL_set(char* val);
char* cfg_Management_username_get();
int cfg_Management_username_set(char* val);
char* cfg_Management_password_get();
int cfg_Management_password_set(char* val);
char* cfg_Management_periodicInform_enable_get();
int cfg_Management_periodicInform_enable_set(char* val);
char* cfg_Management_periodicInform_Interval_get();
int cfg_Management_periodicInform_Interval_set(char* val);
char* cfg_Management_periodicInform_time_get();
int cfg_Management_periodicInform_time_set(char* val);
char* cfg_Management_parameterkey_get();
int cfg_Management_parameterkey_set(char* val);
char* cfg_Management_connectionrequest_URL_get();
int cfg_Management_connectionrequest_URL_set(char* val);
char* cfg_Management_connectionrequest_username_get();
int cfg_Management_connectionrequest_username_set(char* val);
char* cfg_Management_connectionRequest_password_get();
int cfg_Management_connectionRequest_password_set(char* val);
char* cfg_Management_UpgradesManaged_get();
int cfg_Management_UpgradesManaged_set(char* val);
char* cfg_ManagementServer_FirmwareDownloadURL_get();
int cfg_ManagementServer_FirmwareDownloadURL_set(char* val);
char* cfg_ManagementServer_FirmwareUpgradeInProgress_get();
int cfg_ManagementServer_FirmwareUpgradeInProgress_set(char* val);
char* cfg_ManagementServer_ManageableDevice_ManufacturerOUI_get(int id0);
int cfg_ManagementServer_ManageableDevice_ManufacturerOUI_set(int id0, char* val);
char* cfg_ManagementServer_ManageableDevice_SerialNumber_get(int id0);
int cfg_ManagementServer_ManageableDevice_SerialNumber_set(int id0, char* val);
char* cfg_ManagementServer_ManageableDevice_ProductClass_get(int id0);
int cfg_ManagementServer_ManageableDevice_ProductClass_set(int id0, char* val);
char* cfg_ManagementServer_ManageableDevice_Host_get(int id0);
int cfg_ManagementServer_ManageableDevice_Host_set(int id0, char* val);
typedef struct cfg_ManagementServer_ManageableDevice_s {
    char id[8];
    char ManufacturerOUI[7];
    char SerialNumber[65];
    char ProductClass[65];
    char Host[1025];
} cfg_ManagementServer_ManageableDevice_t;
int cfg_ManagementServer_ManageableDevice_tab_add(int id0);
int cfg_ManagementServer_ManageableDevice_tab_set(int id0, cfg_ManagementServer_ManageableDevice_t *p_cfg_ManagementServer_ManageableDevice);
int cfg_ManagementServer_ManageableDevice_tab_del(int id0);
int cfg_ManagementServer_ManageableDevice_tab_num_get(int **pp_index_array);
int cfg_ManagementServer_ManageableDevice_tab_get(int id0, cfg_ManagementServer_ManageableDevice_t **pp_cfg_ManagementServer_ManageableDevice);
char* cfg_time_TimeEnable_get();
int cfg_time_TimeEnable_set(char* val);
char* cfg_time_TimeStatus_get();
int cfg_time_TimeStatus_set(char* val);
char* cfg_time_TimeNTPServer1_get();
int cfg_time_TimeNTPServer1_set(char* val);
char* cfg_time_TimeNTPServer2_get();
int cfg_time_TimeNTPServer2_set(char* val);
char* cfg_time_TimeCurLocalTime_get();
int cfg_time_TimeCurLocalTime_set(char* val);
char* cfg_time_TimeLocalTZ_get();
int cfg_time_TimeLocalTZ_set(char* val);
char* cfg_mgnt_passwd_enable_get();
int cfg_mgnt_passwd_enable_set(char* val);
char* cfg_mgnt_passwd_user_select_get();
int cfg_mgnt_passwd_user_select_set(char* val);
char* cfg_mgnt_upgrade_available_get();
int cfg_mgnt_upgrade_available_set(char* val);
char* cfg_mgnt_warranty_date_get();
int cfg_mgnt_warranty_date_set(char* val);
char* cfg_dsl_FirmwareVersion_get(int id0);
int cfg_dsl_FirmwareVersion_set(int id0, char* val);
char* cfg_dsl_v_basic_support_get(int id0);
int cfg_dsl_v_basic_support_set(int id0, char* val);
char* cfg_dsl_v_basic_select_get(int id0);
int cfg_dsl_v_basic_select_set(int id0, char* val);
char* cfg_dsl_v_al_prof_get(int id0);
int cfg_dsl_v_al_prof_set(int id0, char* val);
char* cfg_dsl_v_cur_prof_get(int id0);
int cfg_dsl_v_cur_prof_set(int id0, char* val);
char* cfg_dsl_UpstreamMaxBitRate_get(int id0);
int cfg_dsl_UpstreamMaxBitRate_set(int id0, char* val);
char* cfg_dsl_DownstreamMaxBitRate_get(int id0);
int cfg_dsl_DownstreamMaxBitRate_set(int id0, char* val);
char* cfg_dsl_v_lpath_get(int id0);
int cfg_dsl_v_lpath_set(int id0, char* val);
char* cfg_dsl_UpstreamCurrRate_get(int id0);
int cfg_dsl_UpstreamCurrRate_set(int id0, char* val);
char* cfg_dsl_DownstreamCurrRate_get(int id0);
int cfg_dsl_DownstreamCurrRate_set(int id0, char* val);
char* cfg_dsl_atm_link_type_get(int id0);
int cfg_dsl_atm_link_type_set(int id0, char* val);
char* cfg_dsl_atm_dest_addr_get(int id0);
int cfg_dsl_atm_dest_addr_set(int id0, char* val);
char* cfg_dsl_atm_encap_get(int id0);
int cfg_dsl_atm_encap_set(int id0, char* val);
char* cfg_dsl_atm_qos_class_get(int id0);
int cfg_dsl_atm_qos_class_set(int id0, char* val);
char* cfg_dsl_atm_PCR_get(int id0);
int cfg_dsl_atm_PCR_set(int id0, char* val);
char* cfg_dsl_atm_max_burst_size_get(int id0);
int cfg_dsl_atm_max_burst_size_set(int id0, char* val);
char* cfg_dsl_atm_SCR_get(int id0);
int cfg_dsl_atm_SCR_set(int id0, char* val);
char* cfg_ether_access_type_get(int id0);
int cfg_ether_access_type_set(int id0, char* val);
char* cfg_ether_mac_addr_get(int id0);
int cfg_ether_mac_addr_set(int id0, char* val);
char* cfg_vlan_termination_vlan_enable_get(int id0);
int cfg_vlan_termination_vlan_enable_set(int id0, char* val);
char* cfg_vlan_termination_vlan_id_get(int id0);
int cfg_vlan_termination_vlan_id_set(int id0, char* val);
char* cfg_usb_InterfaceNumberOfEntries_get();
int cfg_usb_InterfaceNumberOfEntries_set(char* val);
char* cfg_usb_PortNumberOfEntries_get();
int cfg_usb_PortNumberOfEntries_set(char* val);
char* cfg_usb_port_Name_get(int id0);
int cfg_usb_port_Name_set(int id0, char* val);
char* cfg_usb_port_Standard_get(int id0);
int cfg_usb_port_Standard_set(int id0, char* val);
char* cfg_usb_port_Type_get(int id0);
int cfg_usb_port_Type_set(int id0, char* val);
char* cfg_usb_port_Receptacle_get(int id0);
int cfg_usb_port_Receptacle_set(int id0, char* val);
char* cfg_usb_port_Rate_get(int id0);
int cfg_usb_port_Rate_set(int id0, char* val);
char* cfg_usb_port_Power_get(int id0);
int cfg_usb_port_Power_set(int id0, char* val);
typedef struct cfg_usb_port_s {
    char id[8];
    char Name[65];
    char Standard[5];
    char Type[513];
    char Receptacle[513];
    char Rate[513];
    char Power[513];
} cfg_usb_port_t;
int cfg_usb_port_tab_add(int id0);
int cfg_usb_port_tab_set(int id0, cfg_usb_port_t *p_cfg_usb_port);
int cfg_usb_port_tab_del(int id0);
int cfg_usb_port_tab_num_get(int **pp_index_array);
int cfg_usb_port_tab_get(int id0, cfg_usb_port_t **pp_cfg_usb_port);
char* cfg_usb_HostNumberOfEntries_get();
int cfg_usb_HostNumberOfEntries_set(char* val);
char* cfg_usb_host_Enable_get(int id0);
int cfg_usb_host_Enable_set(int id0, char* val);
char* cfg_usb_host_Name_get(int id0);
int cfg_usb_host_Name_set(int id0, char* val);
char* cfg_usb_host_Type_get(int id0);
int cfg_usb_host_Type_set(int id0, char* val);
char* cfg_usb_host_USBVersion_get(int id0);
int cfg_usb_host_USBVersion_set(int id0, char* val);
char* cfg_usb_host_DeviceNumberOfEntries_get(int id0);
int cfg_usb_host_DeviceNumberOfEntries_set(int id0, char* val);
typedef struct cfg_usb_host_s {
    char id[8];
    char Enable[4];
    char Name[65];
    char Type[513];
    char USBVersion[5];
    char DeviceNumberOfEntries[16];
} cfg_usb_host_t;
int cfg_usb_host_tab_add(int id0);
int cfg_usb_host_tab_set(int id0, cfg_usb_host_t *p_cfg_usb_host);
int cfg_usb_host_tab_del(int id0);
int cfg_usb_host_tab_num_get(int **pp_index_array);
int cfg_usb_host_tab_get(int id0, cfg_usb_host_t **pp_cfg_usb_host);
char* cfg_usb_host_device_DeviceNumber_get(int id0, int id1);
int cfg_usb_host_device_DeviceNumber_set(int id0, int id1, char* val);
char* cfg_usb_host_device_USBVersion_get(int id0, int id1);
int cfg_usb_host_device_USBVersion_set(int id0, int id1, char* val);
char* cfg_usb_host_device_DeviceClass_get(int id0, int id1);
int cfg_usb_host_device_DeviceClass_set(int id0, int id1, char* val);
char* cfg_usb_host_device_DeviceSubClass_get(int id0, int id1);
int cfg_usb_host_device_DeviceSubClass_set(int id0, int id1, char* val);
char* cfg_usb_host_device_DeviceVersion_get(int id0, int id1);
int cfg_usb_host_device_DeviceVersion_set(int id0, int id1, char* val);
char* cfg_usb_host_device_DeviceProtocol_get(int id0, int id1);
int cfg_usb_host_device_DeviceProtocol_set(int id0, int id1, char* val);
char* cfg_usb_host_device_ProductID_get(int id0, int id1);
int cfg_usb_host_device_ProductID_set(int id0, int id1, char* val);
char* cfg_usb_host_device_VendorID_get(int id0, int id1);
int cfg_usb_host_device_VendorID_set(int id0, int id1, char* val);
char* cfg_usb_host_device_Manufacturer_get(int id0, int id1);
int cfg_usb_host_device_Manufacturer_set(int id0, int id1, char* val);
char* cfg_usb_host_device_ProductClass_get(int id0, int id1);
int cfg_usb_host_device_ProductClass_set(int id0, int id1, char* val);
char* cfg_usb_host_device_SeriaNumber_get(int id0, int id1);
int cfg_usb_host_device_SeriaNumber_set(int id0, int id1, char* val);
char* cfg_usb_host_device_Port_get(int id0, int id1);
int cfg_usb_host_device_Port_set(int id0, int id1, char* val);
char* cfg_usb_host_device_Rate_get(int id0, int id1);
int cfg_usb_host_device_Rate_set(int id0, int id1, char* val);
char* cfg_usb_host_device_Parent_get(int id0, int id1);
int cfg_usb_host_device_Parent_set(int id0, int id1, char* val);
char* cfg_usb_host_device_MaxChildren_get(int id0, int id1);
int cfg_usb_host_device_MaxChildren_set(int id0, int id1, char* val);
typedef struct cfg_usb_host_device_s {
    char id[8];
    char DeviceNumber[16];
    char USBVersion[5];
    char DeviceClass[257];
    char DeviceSubClass[257];
    char DeviceVersion[16];
    char DeviceProtocol[257];
    char ProductID[16];
    char VendorID[16];
    char Manufacturer[65];
    char ProductClass[65];
    char SerialNumber[65];
    char Port[16];
    char Rate[513];
    char Parent[513];
    char MaxChildren[16];
} cfg_usb_host_device_t;
int cfg_usb_host_device_tab_add(int id0, int id1);
int cfg_usb_host_device_tab_set(int id0, int id1, cfg_usb_host_device_t *p_cfg_usb_host_device);
int cfg_usb_host_device_tab_del(int id0, int id1);
int cfg_usb_host_device_tab_num_get(int id0, int **pp_index_array);
int cfg_usb_host_device_tab_get(int id0, int id1, cfg_usb_host_device_t **pp_cfg_usb_host_device);
char* cfg_HomePlug_X_SC_MapOfMacHFID_MACAddress_get(int id0);
int cfg_HomePlug_X_SC_MapOfMacHFID_MACAddress_set(int id0, char* val);
char* cfg_HomePlug_X_SC_MapOfMacHFID_Nickname_get(int id0);
int cfg_HomePlug_X_SC_MapOfMacHFID_Nickname_set(int id0, char* val);
typedef struct cfg_HomePlug_X_SC_MapOfMacHFID_s {
    char id[8];
    char MACAddress[18];
    char Nickname[65];
} cfg_HomePlug_X_SC_MapOfMacHFID_t;
int cfg_HomePlug_X_SC_MapOfMacHFID_tab_add(int id0);
int cfg_HomePlug_X_SC_MapOfMacHFID_tab_set(int id0, cfg_HomePlug_X_SC_MapOfMacHFID_t *p_cfg_HomePlug_X_SC_MapOfMacHFID);
int cfg_HomePlug_X_SC_MapOfMacHFID_tab_del(int id0);
int cfg_HomePlug_X_SC_MapOfMacHFID_tab_num_get(int **pp_index_array);
int cfg_HomePlug_X_SC_MapOfMacHFID_tab_get(int id0, cfg_HomePlug_X_SC_MapOfMacHFID_t **pp_cfg_HomePlug_X_SC_MapOfMacHFID);
char* cfg_HomePlug_If_Enable_get(int id0);
int cfg_HomePlug_If_Enable_set(int id0, char* val);
char* cfg_HomePlug_If_Name_get(int id0);
int cfg_HomePlug_If_Name_set(int id0, char* val);
char* cfg_HomePlug_If_MACAddress_get(int id0);
int cfg_HomePlug_If_MACAddress_set(int id0, char* val);
char* cfg_HomePlug_If_LogicalNetwork_get(int id0);
int cfg_HomePlug_If_LogicalNetwork_set(int id0, char* val);
char* cfg_HomePlug_If_Version_get(int id0);
int cfg_HomePlug_If_Version_set(int id0, char* val);
char* cfg_HomePlug_If_FirmwareVersion_get(int id0);
int cfg_HomePlug_If_FirmwareVersion_set(int id0, char* val);
char* cfg_HomePlug_If_NetworkPassword_get(int id0);
int cfg_HomePlug_If_NetworkPassword_set(int id0, char* val);
char* cfg_HomePlug_If_OtherNetworksPresent_get(int id0);
int cfg_HomePlug_If_OtherNetworksPresent_set(int id0, char* val);
char* cfg_HomePlug_if_Nickname_get(int id0);
int cfg_HomePlug_if_Nickname_set(int id0, char* val);
char* cfg_HomePlug_If_AssociatedDevice_MACAddress_get(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_MACAddress_set(int id0, int id1, char* val);
char* cfg_HomePlug_If_AssociatedDevice_TxPhyRate_get(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_TxPhyRate_set(int id0, int id1, char* val);
char* cfg_HomePlug_If_AssociatedDevice_RxPhyRate_get(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_RxPhyRate_set(int id0, int id1, char* val);
char* cfg_HomePlug_If_AssociatedDevice_SNRPerTone_get(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_SNRPerTone_set(int id0, int id1, char* val);
char* cfg_HomePlug_If_AssociatedDevice_AvgAttenuation_get(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_AvgAttenuation_set(int id0, int id1, char* val);
char* cfg_HomePlug_If_AssociatedDevice_EndStationMACs_get(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_EndStationMACs_set(int id0, int id1, char* val);
char* cfg_HomePlug_If_AssociatedDevice_Active_get(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_Active_set(int id0, int id1, char* val);
char* cfg_HomePlug_If_AssociatedDevice_X_SC_HFID_get(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_X_SC_HFID_set(int id0, int id1, char* val);
typedef struct cfg_HomePlug_If_AssociatedDevice_s {
    char id[8];
    char MACAddress[18];
    char TxPhyRate[16];
    char RxPhyRate[16];
    char SNRPerTone[513];
    char AvgAttenuation[16];
    char EndStationMACs[289];
    char Active[4];
    char X_SC_HFID[65];
} cfg_HomePlug_If_AssociatedDevice_t;
int cfg_HomePlug_If_AssociatedDevice_tab_add(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_tab_set(int id0, int id1, cfg_HomePlug_If_AssociatedDevice_t *p_cfg_HomePlug_If_AssociatedDevice);
int cfg_HomePlug_If_AssociatedDevice_tab_del(int id0, int id1);
int cfg_HomePlug_If_AssociatedDevice_tab_num_get(int id0, int **pp_index_array);
int cfg_HomePlug_If_AssociatedDevice_tab_get(int id0, int id1, cfg_HomePlug_If_AssociatedDevice_t **pp_cfg_HomePlug_If_AssociatedDevice);
char* cfg_wifi_ConfigChanged_get();
int cfg_wifi_ConfigChanged_set(char* val);
char* cfg_wifi_RadioNumberOfEntries_get();
int cfg_wifi_RadioNumberOfEntries_set(char* val);
char* cfg_wifi_SSIDNumberOfEntries_get();
int cfg_wifi_SSIDNumberOfEntries_set(char* val);
char* cfg_wifi_AccessPointNumberOfEntries_get();
int cfg_wifi_AccessPointNumberOfEntries_set(char* val);
char* cfg_wifi_Enable_get(int id0);
int cfg_wifi_Enable_set(int id0, char* val);
char* cfg_wifi_Status_get(int id0);
int cfg_wifi_Status_set(int id0, char* val);
char* cfg_wifi_Alias_get(int id0);
int cfg_wifi_Alias_set(int id0, char* val);
char* cfg_wifi_Name_get(int id0);
int cfg_wifi_Name_set(int id0, char* val);
char* cfg_wifi_Upstream_get(int id0);
int cfg_wifi_Upstream_set(int id0, char* val);
char* cfg_wifi_MaxBitRate_get(int id0);
int cfg_wifi_MaxBitRate_set(int id0, char* val);
char* cfg_wifi_SupportedFrequencyBands_get(int id0);
int cfg_wifi_SupportedFrequencyBands_set(int id0, char* val);
char* cfg_wifi_OperatingFrequencyBand_get(int id0);
int cfg_wifi_OperatingFrequencyBand_set(int id0, char* val);
char* cfg_wifi_SupportedStandards_get(int id0);
int cfg_wifi_SupportedStandards_set(int id0, char* val);
char* cfg_wifi_OperatingStandards_get(int id0);
int cfg_wifi_OperatingStandards_set(int id0, char* val);
char* cfg_wifi_PossibleChannels_get(int id0);
int cfg_wifi_PossibleChannels_set(int id0, char* val);
char* cfg_wifi_ChannelsInUse_get(int id0);
int cfg_wifi_ChannelsInUse_set(int id0, char* val);
char* cfg_wifi_Channel_get(int id0);
int cfg_wifi_Channel_set(int id0, char* val);
char* cfg_wifi_AutoChannelSupported_get(int id0);
int cfg_wifi_AutoChannelSupported_set(int id0, char* val);
char* cfg_wifi_AutoChannelEnable_get(int id0);
int cfg_wifi_AutoChannelEnable_set(int id0, char* val);
char* cfg_wifi_OperatingChannelBandwidth_get(int id0);
int cfg_wifi_OperatingChannelBandwidth_set(int id0, char* val);
char* cfg_wifi_ExtensionChannel_get(int id0);
int cfg_wifi_ExtensionChannel_set(int id0, char* val);
char* cfg_wifi_GuardInterval_get(int id0);
int cfg_wifi_GuardInterval_set(int id0, char* val);
char* cfg_wifi_MCS_get(int id0);
int cfg_wifi_MCS_set(int id0, char* val);
char* cfg_wifi_TransmitPowerSupported_get(int id0);
int cfg_wifi_TransmitPowerSupported_set(int id0, char* val);
char* cfg_wifi_TransmitPower_get(int id0);
int cfg_wifi_TransmitPower_set(int id0, char* val);
char* cfg_wifi_IEEE80211hSupported_get(int id0);
int cfg_wifi_IEEE80211hSupported_set(int id0, char* val);
char* cfg_wifi_IEEE80211hEnabled_get(int id0);
int cfg_wifi_IEEE80211hEnabled_set(int id0, char* val);
char* cfg_wifi_RegulatoryDomain_get(int id0);
int cfg_wifi_RegulatoryDomain_set(int id0, char* val);
char* cfg_wifi_X_SC_OutputPower_get(int id0);
int cfg_wifi_X_SC_OutputPower_set(int id0, char* val);
char* cfg_wifi_IEEE80211dEnabled_get(int id0);
int cfg_wifi_IEEE80211dEnabled_set(int id0, char* val);
char* cfg_wifi_speed_get(int id0);
int cfg_wifi_speed_set(int id0, char* val);
char* cfg_wifi_Coexistence_get(int id0);
int cfg_wifi_Coexistence_set(int id0, char* val);
char* cfg_wifi_StatsBytesSent_get(int id0);
int cfg_wifi_StatsBytesSent_set(int id0, char* val);
char* cfg_wifi_StatsBytesReceived_get(int id0);
int cfg_wifi_StatsBytesReceived_set(int id0, char* val);
char* cfg_wifi_StatsPacketsSent_get(int id0);
int cfg_wifi_StatsPacketsSent_set(int id0, char* val);
char* cfg_wifi_StatsPacketsReceived_get(int id0);
int cfg_wifi_StatsPacketsReceived_set(int id0, char* val);
char* cfg_wifi_StatsErrorsSent_get(int id0);
int cfg_wifi_StatsErrorsSent_set(int id0, char* val);
char* cfg_wifi_StatsErrorsReceived_get(int id0);
int cfg_wifi_StatsErrorsReceived_set(int id0, char* val);
char* cfg_wifi_ssid_Enable_get(int id0);
int cfg_wifi_ssid_Enable_set(int id0, char* val);
char* cfg_wifi_ssid_Status_get(int id0);
int cfg_wifi_ssid_Status_set(int id0, char* val);
char* cfg_wifi_ssid_Alias_get(int id0);
int cfg_wifi_ssid_Alias_set(int id0, char* val);
char* cfg_wifi_ssid_Name_get(int id0);
int cfg_wifi_ssid_Name_set(int id0, char* val);
char* cfg_wifi_LowerLayers_get(int id0);
int cfg_wifi_LowerLayers_set(int id0, char* val);
char* cfg_wifi_ssid_BSSID_get(int id0);
int cfg_wifi_ssid_BSSID_set(int id0, char* val);
char* cfg_wifi_ssid_MACAddress_get(int id0);
int cfg_wifi_ssid_MACAddress_set(int id0, char* val);
char* cfg_wifi_SSID_get(int id0);
int cfg_wifi_SSID_set(int id0, char* val);
char* cfg_wifi_ssid_StatsBytesSent_get(int id0);
int cfg_wifi_ssid_StatsBytesSent_set(int id0, char* val);
char* cfg_wifi_ssid_StatsBytesReceived_get(int id0);
int cfg_wifi_ssid_StatsBytesReceived_set(int id0, char* val);
char* cfg_wifi_ssid_StatsPacketsSent_get(int id0);
int cfg_wifi_ssid_StatsPacketsSent_set(int id0, char* val);
char* cfg_wifi_ssid_StatsPacketsReceived_get(int id0);
int cfg_wifi_ssid_StatsPacketsReceived_set(int id0, char* val);
char* cfg_wifi_ssid_StatsErrorsSent_get(int id0);
int cfg_wifi_ssid_StatsErrorsSent_set(int id0, char* val);
char* cfg_wifi_ssid_StatsErrorsReceived_get(int id0);
int cfg_wifi_ssid_StatsErrorsReceived_set(int id0, char* val);
char* cfg_wifi_ap_Enable_get(int id0);
int cfg_wifi_ap_Enable_set(int id0, char* val);
char* cfg_wifi_ap_Status_get(int id0);
int cfg_wifi_ap_Status_set(int id0, char* val);
char* cfg_wifi_ap_SSIDReference_get(int id0);
int cfg_wifi_ap_SSIDReference_set(int id0, char* val);
char* cfg_wifi_ap_SSIDAdvertisementEnabled_get(int id0);
int cfg_wifi_ap_SSIDAdvertisementEnabled_set(int id0, char* val);
char* cfg_wifi_ap_WMMCapability_get(int id0);
int cfg_wifi_ap_WMMCapability_set(int id0, char* val);
char* cfg_wifi_ap_UAPSDCapability_get(int id0);
int cfg_wifi_ap_UAPSDCapability_set(int id0, char* val);
char* cfg_wifi_ap_WMMEnable_get(int id0);
int cfg_wifi_ap_WMMEnable_set(int id0, char* val);
char* cfg_wifi_ap_UAPSDEnable_get(int id0);
int cfg_wifi_ap_UAPSDEnable_set(int id0, char* val);
char* cfg_wifi_ap_AssociatedDeviceNumberOfEntries_get(int id0);
int cfg_wifi_ap_AssociatedDeviceNumberOfEntries_set(int id0, char* val);
char* cfg_wifi_ap_MaxAssociatedDevices_get(int id0);
int cfg_wifi_ap_MaxAssociatedDevices_set(int id0, char* val);
char* cfg_wifi_AccessControlLan_get(int id0);
int cfg_wifi_AccessControlLan_set(int id0, char* val);
char* cfg_wifi_ap_AccessControl_get(int id0);
int cfg_wifi_ap_AccessControl_set(int id0, char* val);
char* cfg_wifi_ap_AccessControlList_get(int id0);
int cfg_wifi_ap_AccessControlList_set(int id0, char* val);
char* cfg_wifi_ap_TimeRule_get(int id0);
int cfg_wifi_ap_TimeRule_set(int id0, char* val);
char* cfg_wifi_ap_TimeRuleDay_get(int id0);
int cfg_wifi_ap_TimeRuleDay_set(int id0, char* val);
char* cfg_wifi_ap_TimeRuleMon_get(int id0);
int cfg_wifi_ap_TimeRuleMon_set(int id0, char* val);
char* cfg_wifi_ap_TimeRuleTue_get(int id0);
int cfg_wifi_ap_TimeRuleTue_set(int id0, char* val);
char* cfg_wifi_ap_TimeRuleWed_get(int id0);
int cfg_wifi_ap_TimeRuleWed_set(int id0, char* val);
char* cfg_wifi_ap_TimeRuleThu_get(int id0);
int cfg_wifi_ap_TimeRuleThu_set(int id0, char* val);
char* cfg_wifi_ap_TimeRuleFri_get(int id0);
int cfg_wifi_ap_TimeRuleFri_set(int id0, char* val);
char* cfg_wifi_ap_TimeRuleSta_get(int id0);
int cfg_wifi_ap_TimeRuleSta_set(int id0, char* val);
char* cfg_wifi_ap_TimeRuleSun_get(int id0);
int cfg_wifi_ap_TimeRuleSun_set(int id0, char* val);
char* cfg_wifi_ap_DisconnectDevice_get(int id0);
int cfg_wifi_ap_DisconnectDevice_set(int id0, char* val);
char* cfg_wifi_ap_SecurityModesSupported_get(int id0);
int cfg_wifi_ap_SecurityModesSupported_set(int id0, char* val);
char* cfg_wifi_ap_SecurityCipherConfigMethods_get(int id0);
int cfg_wifi_ap_SecurityCipherConfigMethods_set(int id0, char* val);
char* cfg_wifi_ap_ModeEnabled_get(int id0);
int cfg_wifi_ap_ModeEnabled_set(int id0, char* val);
char* cfg_wifi_ap_WEPKey_Index_get(int id0);
int cfg_wifi_ap_WEPKey_Index_set(int id0, char* val);
char* cfg_wifi_ap_WEPKey_get(int id0);
int cfg_wifi_ap_WEPKey_set(int id0, char* val);
char* cfg_wifi_ap_WEPKey_1_get(int id0);
int cfg_wifi_ap_WEPKey_1_set(int id0, char* val);
char* cfg_wifi_ap_WEPKey_2_get(int id0);
int cfg_wifi_ap_WEPKey_2_set(int id0, char* val);
char* cfg_wifi_ap_WEPKey_3_get(int id0);
int cfg_wifi_ap_WEPKey_3_set(int id0, char* val);
char* cfg_wifi_ap_WEPKey_4_get(int id0);
int cfg_wifi_ap_WEPKey_4_set(int id0, char* val);
char* cfg_wifi_ap_PreSharedKey_get(int id0);
int cfg_wifi_ap_PreSharedKey_set(int id0, char* val);
char* cfg_wifi_ap_KeyPassphrase_get(int id0);
int cfg_wifi_ap_KeyPassphrase_set(int id0, char* val);
char* cfg_wifi_ap_wps_Enable_get(int id0);
int cfg_wifi_ap_wps_Enable_set(int id0, char* val);
char* cfg_wifi_ap_wps_ConfigMethodsSupported_get(int id0);
int cfg_wifi_ap_wps_ConfigMethodsSupported_set(int id0, char* val);
char* cfg_wifi_ap_WPS_ConfigMethodsEnabled_get(int id0);
int cfg_wifi_ap_WPS_ConfigMethodsEnabled_set(int id0, char* val);
char* cfg_wifi_ap_wps_pin_get(int id0);
int cfg_wifi_ap_wps_pin_set(int id0, char* val);
char* cfg_wifi_ap_AD_MACAddress_get(int id0, int id1);
int cfg_wifi_ap_AD_MACAddress_set(int id0, int id1, char* val);
char* cfg_wifi_ap_AD_SignalStrength_get(int id0, int id1);
int cfg_wifi_ap_AD_SignalStrength_set(int id0, int id1, char* val);
char* cfg_ppp_privacy_ipv6_enable_get();
int cfg_ppp_privacy_ipv6_enable_set(char* val);
char* cfg_ppp_privacy_ipv6_pppoedown_get();
int cfg_ppp_privacy_ipv6_pppoedown_set(char* val);
char* cfg_ppp_privacy_ipv6_autoreconnectinterval_get();
int cfg_ppp_privacy_ipv6_autoreconnectinterval_set(char* val);
char* cfg_ppp_wan_privacy_ipv6_randomoffset_get();
int cfg_ppp_wan_privacy_ipv6_randomoffset_set(char* val);
char* cfg_ppp_wan_privacy_ipv6_starttime_get();
int cfg_ppp_wan_privacy_ipv6_starttime_set(char* val);
char* cfg_ppp_wan_privacy_ipv6_nextevent_get();
int cfg_ppp_wan_privacy_ipv6_nextevent_set(char* val);
char* cfg_ppp_connection_enable_get(int id0);
int cfg_ppp_connection_enable_set(int id0, char* val);
char* cfg_ppp_connection_provider_type_get(int id0);
int cfg_ppp_connection_provider_type_set(int id0, char* val);
char* cfg_ppp_connection_other_provider_name_get(int id0);
int cfg_ppp_connection_other_provider_name_set(int id0, char* val);
char* cfg_ppp_connection_other_username_get(int id0);
int cfg_ppp_connection_other_username_set(int id0, char* val);
char* cfg_ppp_connection_other_passwd_get(int id0);
int cfg_ppp_connection_other_passwd_set(int id0, char* val);
char* cfg_ppp_connection_t_username_get(int id0);
int cfg_ppp_connection_t_username_set(int id0, char* val);
char* cfg_ppp_connection_t_password_get(int id0);
int cfg_ppp_connection_t_password_set(int id0, char* val);
char* cfg_ppp_connection_auto_username_get(int id0);
int cfg_ppp_connection_auto_username_set(int id0, char* val);
char* cfg_ppp_connection_auto_password_get(int id0);
int cfg_ppp_connection_auto_password_set(int id0, char* val);
char* cfg_ppp_connection_if_name_get(int id0);
int cfg_ppp_connection_if_name_set(int id0, char* val);
char* cfg_ppp_connection_reset_get(int id0);
int cfg_ppp_connection_reset_set(int id0, char* val);
char* cfg_ppp_connection_idle_time_get(int id0);
int cfg_ppp_connection_idle_time_set(int id0, char* val);
char* cfg_ppp_connection_user_name_get(int id0);
int cfg_ppp_connection_user_name_set(int id0, char* val);
char* cfg_ppp_connection_password_get(int id0);
int cfg_ppp_connection_password_set(int id0, char* val);
char* cfg_ppp_connection_mtu_get(int id0);
int cfg_ppp_connection_mtu_set(int id0, char* val);
char* cfg_ppp_connection_trigger_get(int id0);
int cfg_ppp_connection_trigger_set(int id0, char* val);
char* cfg_ppp_connection_lcp_echo_get(int id0);
int cfg_ppp_connection_lcp_echo_set(int id0, char* val);
char* cfg_ppp_connection_lcp_retry_get(int id0);
int cfg_ppp_connection_lcp_retry_set(int id0, char* val);
char* cfg_ppp_connection_ipcpenable_get(int id0);
int cfg_ppp_connection_ipcpenable_set(int id0, char* val);
char* cfg_ppp_connection_ipv6cpenable_get(int id0);
int cfg_ppp_connection_ipv6cpenable_set(int id0, char* val);
char* cfg_ppp_connection_provider_get(int id0);
int cfg_ppp_connection_provider_set(int id0, char* val);
char* cfg_ppp_connection_conn_id_get(int id0);
int cfg_ppp_connection_conn_id_set(int id0, char* val);
char* cfg_ppp_connection_access_num_get(int id0);
int cfg_ppp_connection_access_num_set(int id0, char* val);
char* cfg_ppp_connection_jonit_num_get(int id0);
int cfg_ppp_connection_jonit_num_set(int id0, char* val);
char* cfg_ppp_connection_auto_ipv4_enable_get(int id0);
int cfg_ppp_connection_auto_ipv4_enable_set(int id0, char* val);
char* cfg_ppp_connection_pppoe_passthrough_enable_get(int id0);
int cfg_ppp_connection_pppoe_passthrough_enable_set(int id0, char* val);
char* cfg_ppp_connection_TR064LastAuthErrorInfo_get(int id0);
int cfg_ppp_connection_TR064LastAuthErrorInfo_set(int id0, char* val);
char* cfg_ppp_connection_ac_name_get(int id0);
int cfg_ppp_connection_ac_name_set(int id0, char* val);
char* cfg_ppp_connection_service_name_get(int id0);
int cfg_ppp_connection_service_name_set(int id0, char* val);
char* cfg_ppp_connection_ipv4_addr_get(int id0);
int cfg_ppp_connection_ipv4_addr_set(int id0, char* val);
char* cfg_ppp_connection_dns_get(int id0);
int cfg_ppp_connection_dns_set(int id0, char* val);
char* cfg_ip_ipv4enable_get();
int cfg_ip_ipv4enable_set(char* val);
char* cfg_ip_ipv6enabel_get();
int cfg_ip_ipv6enabel_set(char* val);
char* cfg_ip_ulaprefix_get();
int cfg_ip_ulaprefix_set(char* val);
char* cfg_ip_basic_privacy_get();
int cfg_ip_basic_privacy_set(char* val);
char* cfg_ip_x_sc_access_type_get();
int cfg_ip_x_sc_access_type_set(char* val);
char* cfg_ip_enable_get(int id0);
int cfg_ip_enable_set(int id0, char* val);
char* cfg_ip_ipv4_enable_get(int id0);
int cfg_ip_ipv4_enable_set(int id0, char* val);
char* cfg_ip_ipv6_enable_get(int id0);
int cfg_ip_ipv6_enable_set(int id0, char* val);
char* cfg_ip_ipv6_ula_enable_get(int id0);
int cfg_ip_ipv6_ula_enable_set(int id0, char* val);
char* cfg_ip_ipv6_ula_subnetID_get(int id0);
int cfg_ip_ipv6_ula_subnetID_set(int id0, char* val);
char* cfg_ip_ipv6_pext_enable_get(int id0);
int cfg_ip_ipv6_pext_enable_set(int id0, char* val);
char* cfg_ip_ipv6_temp_valid_lifetime_get(int id0);
int cfg_ip_ipv6_temp_valid_lifetime_set(int id0, char* val);
char* cfg_ip_ipv6_temp_preffered_lifetime_get(int id0);
int cfg_ip_ipv6_temp_preffered_lifetime_set(int id0, char* val);
char* cfg_ip_if_alias_get(int id0);
int cfg_ip_if_alias_set(int id0, char* val);
char* cfg_ip_if_name_get(int id0);
int cfg_ip_if_name_set(int id0, char* val);
char* cfg_ip_name_get(int id0);
int cfg_ip_name_set(int id0, char* val);
char* cfg_ip_mode_get(int id0);
int cfg_ip_mode_set(int id0, char* val);
char* cfg_ip_mtu_get(int id0);
int cfg_ip_mtu_set(int id0, char* val);
char* cfg_ip_ipv4_addr_get(int id0, int id1);
int cfg_ip_ipv4_addr_set(int id0, int id1, char* val);
char* cfg_ip_net_mask_get(int id0, int id1);
int cfg_ip_net_mask_set(int id0, int id1, char* val);
char* cfg_ip_type_get(int id0, int id1);
int cfg_ip_type_set(int id0, int id1, char* val);
char* cfg_routing_ipv4_forwarding_Enable_get(int id0, int id1);
int cfg_routing_ipv4_forwarding_Enable_set(int id0, int id1, char* val);
char* cfg_routing_ipv4_forwarding_Status_get(int id0, int id1);
int cfg_routing_ipv4_forwarding_Status_set(int id0, int id1, char* val);
char* cfg_routing_ipv4_forwarding_StaticRoute_get(int id0, int id1);
int cfg_routing_ipv4_forwarding_StaticRoute_set(int id0, int id1, char* val);
char* cfg_routing_ipv4_forwarding_DestIPAddress_get(int id0, int id1);
int cfg_routing_ipv4_forwarding_DestIPAddress_set(int id0, int id1, char* val);
char* cfg_routing_ipv4_forwarding_DestSubnetMask_get(int id0, int id1);
int cfg_routing_ipv4_forwarding_DestSubnetMask_set(int id0, int id1, char* val);
char* cfg_routing_ipv4_forwarding_GatewayIPAddress_get(int id0, int id1);
int cfg_routing_ipv4_forwarding_GatewayIPAddress_set(int id0, int id1, char* val);
char* cfg_routing_ipv4_forwarding_Interface_get(int id0, int id1);
int cfg_routing_ipv4_forwarding_Interface_set(int id0, int id1, char* val);
char* cfg_routing_ipv4_forwarding_Origin_get(int id0, int id1);
int cfg_routing_ipv4_forwarding_Origin_set(int id0, int id1, char* val);
char* cfg_routing_ipv4_forwarding_ForwardingMetric_get(int id0, int id1);
int cfg_routing_ipv4_forwarding_ForwardingMetric_set(int id0, int id1, char* val);
typedef struct cfg_routing_ipv4_forwarding_s {
    char id[8];
    char Enable[4];
    char Status[513];
    char StaticRoute[4];
    char DestIPAddress[16];
    char DestSubnetMask[16];
    char GatewayIPAddress[16];
    char Interface[257];
    char Origin[513];
    char ForwardingMetric[16];
} cfg_routing_ipv4_forwarding_t;
int cfg_routing_ipv4_forwarding_tab_add(int id0, int id1);
int cfg_routing_ipv4_forwarding_tab_set(int id0, int id1, cfg_routing_ipv4_forwarding_t *p_cfg_routing_ipv4_forwarding);
int cfg_routing_ipv4_forwarding_tab_del(int id0, int id1);
int cfg_routing_ipv4_forwarding_tab_num_get(int id0, int **pp_index_array);
int cfg_routing_ipv4_forwarding_tab_get(int id0, int id1, cfg_routing_ipv4_forwarding_t **pp_cfg_routing_ipv4_forwarding);
char* cfg_routing_ipv6_forwarding_Enabel_get(int id0, int id1);
int cfg_routing_ipv6_forwarding_Enabel_set(int id0, int id1, char* val);
char* cfg_routing_ipv6_forwarding_Status_get(int id0, int id1);
int cfg_routing_ipv6_forwarding_Status_set(int id0, int id1, char* val);
char* cfg_routing_ipv6_forwarding_DestIPPrefix_get(int id0, int id1);
int cfg_routing_ipv6_forwarding_DestIPPrefix_set(int id0, int id1, char* val);
char* cfg_routing_ipv6_forwarding_NextHop_get(int id0, int id1);
int cfg_routing_ipv6_forwarding_NextHop_set(int id0, int id1, char* val);
char* cfg_routing_ipv6_forwarding_Interface_get(int id0, int id1);
int cfg_routing_ipv6_forwarding_Interface_set(int id0, int id1, char* val);
char* cfg_routing_ipv6_forwarding_Origin_get(int id0, int id1);
int cfg_routing_ipv6_forwarding_Origin_set(int id0, int id1, char* val);
char* cfg_routing_ipv6_forwarding_ForwardingMetric_get(int id0, int id1);
int cfg_routing_ipv6_forwarding_ForwardingMetric_set(int id0, int id1, char* val);
typedef struct cfg_routing_ipv6_forwarding_s {
    char id[8];
    char Enable[4];
    char Status[513];
    char DestIPPrefix[513];
    char NextHop[513];
    char Interface[257];
    char Origin[513];
    char ForwardingMetric[16];
} cfg_routing_ipv6_forwarding_t;
int cfg_routing_ipv6_forwarding_tab_add(int id0, int id1);
int cfg_routing_ipv6_forwarding_tab_set(int id0, int id1, cfg_routing_ipv6_forwarding_t *p_cfg_routing_ipv6_forwarding);
int cfg_routing_ipv6_forwarding_tab_del(int id0, int id1);
int cfg_routing_ipv6_forwarding_tab_num_get(int id0, int **pp_index_array);
int cfg_routing_ipv6_forwarding_tab_get(int id0, int id1, cfg_routing_ipv6_forwarding_t **pp_cfg_routing_ipv6_forwarding);
char* cfg_routing_routeinformation_Enable_get();
int cfg_routing_routeinformation_Enable_set(char* val);
char* cfg_routing_routeinformation_ifsetting_Status_get(int id0);
int cfg_routing_routeinformation_ifsetting_Status_set(int id0, char* val);
char* cfg_routing_routeinformation_ifsetting_Interface_get(int id0);
int cfg_routing_routeinformation_ifsetting_Interface_set(int id0, char* val);
char* cfg_routing_routeinformation_ifsetting_SourceRouter_get(int id0);
int cfg_routing_routeinformation_ifsetting_SourceRouter_set(int id0, char* val);
char* cfg_routing_routeinformation_ifsetting_PreferredRouteFlag_get(int id0);
int cfg_routing_routeinformation_ifsetting_PreferredRouteFlag_set(int id0, char* val);
char* cfg_routing_routeinformation_ifsetting_Prefix_get(int id0);
int cfg_routing_routeinformation_ifsetting_Prefix_set(int id0, char* val);
char* cfg_routing_routeinformation_ifsetting_RouteLifetime_get(int id0);
int cfg_routing_routeinformation_ifsetting_RouteLifetime_set(int id0, char* val);
typedef struct cfg_routing_routeinformation_ifsetting_s {
    char id[8];
    char Status[513];
    char Interface[257];
    char SourceRouter[513];
    char PreferredRouteFlag[513];
    char Prefix[513];
    char RouteLifetime[257];
} cfg_routing_routeinformation_ifsetting_t;
int cfg_routing_routeinformation_ifsetting_tab_add(int id0);
int cfg_routing_routeinformation_ifsetting_tab_set(int id0, cfg_routing_routeinformation_ifsetting_t *p_cfg_routing_routeinformation_ifsetting);
int cfg_routing_routeinformation_ifsetting_tab_del(int id0);
int cfg_routing_routeinformation_ifsetting_tab_num_get(int **pp_index_array);
int cfg_routing_routeinformation_ifsetting_tab_get(int id0, cfg_routing_routeinformation_ifsetting_t **pp_cfg_routing_routeinformation_ifsetting);
char* cfg_neighbordiscovery_Enable_get();
int cfg_neighbordiscovery_Enable_set(char* val);
char* cfg_neighbordiscovery_ifsetting_Enable_get(int id0);
int cfg_neighbordiscovery_ifsetting_Enable_set(int id0, char* val);
char* cfg_neighbordiscovery_ifsetting_Status_get(int id0);
int cfg_neighbordiscovery_ifsetting_Status_set(int id0, char* val);
char* cfg_neighbordiscovery_ifsetting_Interface_get(int id0);
int cfg_neighbordiscovery_ifsetting_Interface_set(int id0, char* val);
char* cfg_neighbordiscovery_ifsetting_RetransTimer_get(int id0);
int cfg_neighbordiscovery_ifsetting_RetransTimer_set(int id0, char* val);
char* cfg_neighbordiscovery_ifsetting_RtrSolicitationInterval_get(int id0);
int cfg_neighbordiscovery_ifsetting_RtrSolicitationInterval_set(int id0, char* val);
char* cfg_neighbordiscovery_ifsetting_MaxRtrSolicitations_get(int id0);
int cfg_neighbordiscovery_ifsetting_MaxRtrSolicitations_set(int id0, char* val);
char* cfg_neighbordiscovery_ifsetting_NUDEnable_get(int id0);
int cfg_neighbordiscovery_ifsetting_NUDEnable_set(int id0, char* val);
char* cfg_neighbordiscovery_ifsetting_RSEnable_get(int id0);
int cfg_neighbordiscovery_ifsetting_RSEnable_set(int id0, char* val);
typedef struct cfg_neighbordiscovery_ifsetting_s {
    char id[8];
    char Enable[4];
    char Status[513];
    char Interface[513];
    char RetransTimer[16];
    char RtrSolicitationInterval[16];
    char MaxRtrSolicitations[16];
    char NUDEnable[4];
    char RSEnable[4];
} cfg_neighbordiscovery_ifsetting_t;
int cfg_neighbordiscovery_ifsetting_tab_add(int id0);
int cfg_neighbordiscovery_ifsetting_tab_set(int id0, cfg_neighbordiscovery_ifsetting_t *p_cfg_neighbordiscovery_ifsetting);
int cfg_neighbordiscovery_ifsetting_tab_del(int id0);
int cfg_neighbordiscovery_ifsetting_tab_num_get(int **pp_index_array);
int cfg_neighbordiscovery_ifsetting_tab_get(int id0, cfg_neighbordiscovery_ifsetting_t **pp_cfg_neighbordiscovery_ifsetting);
char* cfg_routeradvertisement_Enable_get();
int cfg_routeradvertisement_Enable_set(char* val);
char* cfg_routeradvertisement_ifsetting_Enable_get(int id0);
int cfg_routeradvertisement_ifsetting_Enable_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_Status_get(int id0);
int cfg_routeradvertisement_ifsetting_Status_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_Interface_get(int id0);
int cfg_routeradvertisement_ifsetting_Interface_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_MaxRtrAdvInterval_get(int id0);
int cfg_routeradvertisement_ifsetting_MaxRtrAdvInterval_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_MinRtrAdvInterval_get(int id0);
int cfg_routeradvertisement_ifsetting_MinRtrAdvInterval_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvDefaultLifetime_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvDefaultLifetime_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvManagedFlag_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvManagedFlag_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvOtherConfigFlag_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvOtherConfigFlag_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvMobileAgentFlag_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvMobileAgentFlag_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvPreferredRouterFlag_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvPreferredRouterFlag_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvNDProxyFlag_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvNDProxyFlag_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvLinkMTU_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvLinkMTU_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvReachableTime_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvReachableTime_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvRetransTimer_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvRetransTimer_set(int id0, char* val);
char* cfg_routeradvertisement_ifsetting_AdvCurHopLimit_get(int id0);
int cfg_routeradvertisement_ifsetting_AdvCurHopLimit_set(int id0, char* val);
typedef struct cfg_routeradvertisement_ifsetting_s {
    char id[8];
    char Enable[4];
    char Status[513];
    char Interface[513];
    char MaxRtrAdvInterval[16];
    char MinRtrAdvInterval[16];
    char AdvDefaultLifetime[16];
    char AdvManagedFlag[4];
    char AdvOtherConfigFlag[4];
    char AdvMobileAgentFlag[4];
    char AdvPreferredRouterFlag[513];
    char AdvNDProxyFlag[4];
    char AdvLinkMTU[16];
    char AdvReachableTime[16];
    char AdvRetransTimer[16];
    char AdvCurHopLimit[16];
} cfg_routeradvertisement_ifsetting_t;
int cfg_routeradvertisement_ifsetting_tab_add(int id0);
int cfg_routeradvertisement_ifsetting_tab_set(int id0, cfg_routeradvertisement_ifsetting_t *p_cfg_routeradvertisement_ifsetting);
int cfg_routeradvertisement_ifsetting_tab_del(int id0);
int cfg_routeradvertisement_ifsetting_tab_num_get(int **pp_index_array);
int cfg_routeradvertisement_ifsetting_tab_get(int id0, cfg_routeradvertisement_ifsetting_t **pp_cfg_routeradvertisement_ifsetting);
char* cfg_routeradvertisement_ifsetting_option_Enable_get(int id0, int id1);
int cfg_routeradvertisement_ifsetting_option_Enable_set(int id0, int id1, char* val);
char* cfg_routeradvertisement_ifsetting_option_Tag_get(int id0, int id1);
int cfg_routeradvertisement_ifsetting_option_Tag_set(int id0, int id1, char* val);
char* cfg_routeradvertisement_ifsetting_option_Value_get(int id0, int id1);
int cfg_routeradvertisement_ifsetting_option_Value_set(int id0, int id1, char* val);
typedef struct cfg_routeradvertisement_ifsetting_option_s {
    char id[8];
    char Enable[4];
    char Tag[16];
    char Value[257];
} cfg_routeradvertisement_ifsetting_option_t;
int cfg_routeradvertisement_ifsetting_option_tab_add(int id0, int id1);
int cfg_routeradvertisement_ifsetting_option_tab_set(int id0, int id1, cfg_routeradvertisement_ifsetting_option_t *p_cfg_routeradvertisement_ifsetting_option);
int cfg_routeradvertisement_ifsetting_option_tab_del(int id0, int id1);
int cfg_routeradvertisement_ifsetting_option_tab_num_get(int id0, int **pp_index_array);
int cfg_routeradvertisement_ifsetting_option_tab_get(int id0, int id1, cfg_routeradvertisement_ifsetting_option_t **pp_cfg_routeradvertisement_ifsetting_option);
char* cfg_qos_Enable_get();
int cfg_qos_Enable_set(char* val);
char* cfg_qos_queue_entry_Enable_get(int id0);
int cfg_qos_queue_entry_Enable_set(int id0, char* val);
char* cfg_qos_queue_entry_Interface_get(int id0);
int cfg_qos_queue_entry_Interface_set(int id0, char* val);
char* cfg_qos_queue_entry_Weight_get(int id0);
int cfg_qos_queue_entry_Weight_set(int id0, char* val);
char* cfg_qos_queue_entry_Precedence_get(int id0);
int cfg_qos_queue_entry_Precedence_set(int id0, char* val);
char* cfg_qos_queue_entry_DropAlgorithm_get(int id0);
int cfg_qos_queue_entry_DropAlgorithm_set(int id0, char* val);
char* cfg_qos_queue_entry_SchedulerAlgorithm_get(int id0);
int cfg_qos_queue_entry_SchedulerAlgorithm_set(int id0, char* val);
char* cfg_qos_queue_entry_ShapingRate_get(int id0);
int cfg_qos_queue_entry_ShapingRate_set(int id0, char* val);
char* cfg_qos_queue_entry_ShapingBurstSize_get(int id0);
int cfg_qos_queue_entry_ShapingBurstSize_set(int id0, char* val);
typedef struct cfg_qos_queue_entry_s {
    char id[8];
    char Enable[4];
    char Interface[257];
    char Weight[16];
    char Precedence[16];
    char DropAlgorithm[513];
    char SchedulerAlgorithm[513];
    char ShapingRate[16];
    char ShapingBurstSize[16];
} cfg_qos_queue_entry_t;
int cfg_qos_queue_entry_tab_add(int id0);
int cfg_qos_queue_entry_tab_set(int id0, cfg_qos_queue_entry_t *p_cfg_qos_queue_entry);
int cfg_qos_queue_entry_tab_del(int id0);
int cfg_qos_queue_entry_tab_num_get(int **pp_index_array);
int cfg_qos_queue_entry_tab_get(int id0, cfg_qos_queue_entry_t **pp_cfg_qos_queue_entry);
char* cfg_lan_cfg_passwd_get();
int cfg_lan_cfg_passwd_set(char* val);
char* cfg_lan_host_entry_PhysAddress_get(int id0);
int cfg_lan_host_entry_PhysAddress_set(int id0, char* val);
char* cfg_lan_host_entry_IPAddress_get(int id0);
int cfg_lan_host_entry_IPAddress_set(int id0, char* val);
char* cfg_lan_host_entry_AddressSource_get(int id0);
int cfg_lan_host_entry_AddressSource_set(int id0, char* val);
char* cfg_lan_host_entry_DHCPClient_get(int id0);
int cfg_lan_host_entry_DHCPClient_set(int id0, char* val);
char* cfg_lan_host_entry_LeaseTimeRemaining_get(int id0);
int cfg_lan_host_entry_LeaseTimeRemaining_set(int id0, char* val);
char* cfg_lan_host_entry_AssociatedDevice_get(int id0);
int cfg_lan_host_entry_AssociatedDevice_set(int id0, char* val);
char* cfg_lan_host_entry_Layer1Interface_get(int id0);
int cfg_lan_host_entry_Layer1Interface_set(int id0, char* val);
char* cfg_lan_host_entry_Layer3Interface_get(int id0);
int cfg_lan_host_entry_Layer3Interface_set(int id0, char* val);
char* cfg_lan_host_entry_HostName_get(int id0);
int cfg_lan_host_entry_HostName_set(int id0, char* val);
char* cfg_lan_host_entry_Active_get(int id0);
int cfg_lan_host_entry_Active_set(int id0, char* val);
typedef struct cfg_lan_host_entry_s {
    char id[8];
    char PhysAddress[65];
    char IPAddress[46];
    char AddressSource[513];
    char DHCPClient[513];
    char LeaseTimeRemaining[16];
    char AssociatedDevice[257];
    char Layer1Interface[257];
    char Layer3Interface[257];
    char HostName[65];
    char Active[4];
} cfg_lan_host_entry_t;
int cfg_lan_host_entry_tab_add(int id0,int isvirtual);
int cfg_lan_host_entry_tab_set(int id0, cfg_lan_host_entry_t *p_cfg_lan_host_entry);
int cfg_lan_host_entry_tab_del(int id0);
int cfg_lan_host_entry_tab_num_get(int **pp_index_array);
int cfg_lan_host_entry_tab_get(int id0, cfg_lan_host_entry_t **pp_cfg_lan_host_entry);
char* cfg_lan_host_entry_ipv4_IPAddress_get(int id0, int id1);
int cfg_lan_host_entry_ipv4_IPAddress_set(int id0, int id1, char* val);
typedef struct cfg_lan_host_entry_ipv4_s {
    char id[8];
    char IPAddress[16];
} cfg_lan_host_entry_ipv4_t;
int cfg_lan_host_entry_ipv4_tab_add(int id0, int id1);
int cfg_lan_host_entry_ipv4_tab_set(int id0, int id1, cfg_lan_host_entry_ipv4_t *p_cfg_lan_host_entry_ipv4);
int cfg_lan_host_entry_ipv4_tab_del(int id0, int id1);
int cfg_lan_host_entry_ipv4_tab_num_get(int id0, int **pp_index_array);
int cfg_lan_host_entry_ipv4_tab_get(int id0, int id1, cfg_lan_host_entry_ipv4_t **pp_cfg_lan_host_entry_ipv4);
char* cfg_lan_host_entry_ipv6_IPAddress_get(int id0, int id1);
int cfg_lan_host_entry_ipv6_IPAddress_set(int id0, int id1, char* val);
typedef struct cfg_lan_host_entry_ipv6_s {
    char id[8];
    char IPAddress[513];
} cfg_lan_host_entry_ipv6_t;
int cfg_lan_host_entry_ipv6_tab_add(int id0, int id1);
int cfg_lan_host_entry_ipv6_tab_set(int id0, int id1, cfg_lan_host_entry_ipv6_t *p_cfg_lan_host_entry_ipv6);
int cfg_lan_host_entry_ipv6_tab_del(int id0, int id1);
int cfg_lan_host_entry_ipv6_tab_num_get(int id0, int **pp_index_array);
int cfg_lan_host_entry_ipv6_tab_get(int id0, int id1, cfg_lan_host_entry_ipv6_t **pp_cfg_lan_host_entry_ipv6);
char* cfg_dfnd_ManagementKey_get();
int cfg_dfnd_ManagementKey_set(char* val);
char* cfg_dfnd_ProvisioningCode_get();
int cfg_dfnd_ProvisioningCode_set(char* val);
char* cfg_dfnd_configuration_code_get();
int cfg_dfnd_configuration_code_set(char* val);
char* cfg_dfnd_entry_DeviceID_get(int id0);
int cfg_dfnd_entry_DeviceID_set(int id0, char* val);
char* cfg_dfnd_entry_DeviceClass_get(int id0);
int cfg_dfnd_entry_DeviceClass_set(int id0, char* val);
char* cfg_dfnd_entry_DeviceCategory_get(int id0);
int cfg_dfnd_entry_DeviceCategory_set(int id0, char* val);
char* cfg_dfnd_entry_DeviceName_get(int id0);
int cfg_dfnd_entry_DeviceName_set(int id0, char* val);
char* cfg_dfnd_entry_ProductClass_get(int id0);
int cfg_dfnd_entry_ProductClass_set(int id0, char* val);
char* cfg_dfnd_entry_Manufacturer_get(int id0);
int cfg_dfnd_entry_Manufacturer_set(int id0, char* val);
char* cfg_dfnd_entry_ManufacturerURL_get(int id0);
int cfg_dfnd_entry_ManufacturerURL_set(int id0, char* val);
char* cfg_dfnd_entry_ModelName_get(int id0);
int cfg_dfnd_entry_ModelName_set(int id0, char* val);
char* cfg_dfnd_entry_FirmwareVersion_get(int id0);
int cfg_dfnd_entry_FirmwareVersion_set(int id0, char* val);
char* cfg_dfnd_entry_HardwareRevision_get(int id0);
int cfg_dfnd_entry_HardwareRevision_set(int id0, char* val);
char* cfg_dfnd_entry_SerialNumber_get(int id0);
int cfg_dfnd_entry_SerialNumber_set(int id0, char* val);
char* cfg_dfnd_entry_ProvisioningCode_get(int id0);
int cfg_dfnd_entry_ProvisioningCode_set(int id0, char* val);
char* cfg_dfnd_entry_ConfigurationValue_get(int id0);
int cfg_dfnd_entry_ConfigurationValue_set(int id0, char* val);
char* cfg_dfnd_entry_ServiceSummary_get(int id0);
int cfg_dfnd_entry_ServiceSummary_set(int id0, char* val);
char* cfg_dfnd_entry_ManagementKey_get(int id0);
int cfg_dfnd_entry_ManagementKey_set(int id0, char* val);
char* cfg_dfnd_entry_HostId_get(int id0);
int cfg_dfnd_entry_HostId_set(int id0, char* val);
typedef struct cfg_dfnd_entry_s {
    char id[8];
    char DeviceID[16];
    char DeviceClass[17];
    char DeviceCategory[17];
    char DeviceName[65];
    char ProductClass[17];
    char Manufacturer[33];
    char ManufacturerURL[513];
    char ModelName[17];
    char FirmwareVersion[33];
    char HardwareRevision[33];
    char SerialNumber[33];
    char ProvisioningCode[17];
    char ConfigurationValue[65];
    char ServiceSummary[513];
    char ManagementKey[129];
    char HostId[16];
} cfg_dfnd_entry_t;
int cfg_dfnd_entry_tab_add(int id0);
int cfg_dfnd_entry_tab_set(int id0, cfg_dfnd_entry_t *p_cfg_dfnd_entry);
int cfg_dfnd_entry_tab_del(int id0);
int cfg_dfnd_entry_tab_num_get(int **pp_index_array);
int cfg_dfnd_entry_tab_get(int id0, cfg_dfnd_entry_t **pp_cfg_dfnd_entry);
char* cfg_dns_retry_interval_get();
int cfg_dns_retry_interval_set(char* val);
char* cfg_dns_ddns_Enable_get();
int cfg_dns_ddns_Enable_set(char* val);
char* cfg_dns_ddns_Wanid_get();
int cfg_dns_ddns_Wanid_set(char* val);
char* cfg_dns_ddns_Provider_get();
int cfg_dns_ddns_Provider_set(char* val);
char* cfg_dns_ddns_DomainName_get();
int cfg_dns_ddns_DomainName_set(char* val);
char* cfg_dns_ddns_Username_get();
int cfg_dns_ddns_Username_set(char* val);
char* cfg_dns_ddns_Password_get();
int cfg_dns_ddns_Password_set(char* val);
char* cfg_dns_client_enable_get();
int cfg_dns_client_enable_set(char* val);
char* cfg_dns_client_status_get();
int cfg_dns_client_status_set(char* val);
char* cfg_dns_client_server_Enable_get(int id0);
int cfg_dns_client_server_Enable_set(int id0, char* val);
char* cfg_dns_client_server_Status_get(int id0);
int cfg_dns_client_server_Status_set(int id0, char* val);
char* cfg_dns_client_server_DNSServer_get(int id0);
int cfg_dns_client_server_DNSServer_set(int id0, char* val);
char* cfg_dns_client_server_Interface_get(int id0);
int cfg_dns_client_server_Interface_set(int id0, char* val);
char* cfg_dns_client_server_Type_get(int id0);
int cfg_dns_client_server_Type_set(int id0, char* val);
typedef struct cfg_dns_client_server_s {
    char id[8];
    char Enable[4];
    char Status[513];
    char DNSServer[46];
    char Interface[257];
    char Type[513];
} cfg_dns_client_server_t;
int cfg_dns_client_server_tab_add(int id0);
int cfg_dns_client_server_tab_set(int id0, cfg_dns_client_server_t *p_cfg_dns_client_server);
int cfg_dns_client_server_tab_del(int id0);
int cfg_dns_client_server_tab_num_get(int **pp_index_array);
int cfg_dns_client_server_tab_get(int id0, cfg_dns_client_server_t **pp_cfg_dns_client_server);
char* cfg_dns_relay_forwarding_Enable_get(int id0);
int cfg_dns_relay_forwarding_Enable_set(int id0, char* val);
char* cfg_dns_relay_forwarding_Status_get(int id0);
int cfg_dns_relay_forwarding_Status_set(int id0, char* val);
char* cfg_dns_relay_forwarding_DNSServer_get(int id0);
int cfg_dns_relay_forwarding_DNSServer_set(int id0, char* val);
char* cfg_dns_relay_forwarding_Interface_get(int id0);
int cfg_dns_relay_forwarding_Interface_set(int id0, char* val);
char* cfg_dns_relay_forwarding_Type_get(int id0);
int cfg_dns_relay_forwarding_Type_set(int id0, char* val);
typedef struct cfg_dns_relay_forwarding_s {
    char id[8];
    char Enable[4];
    char Status[513];
    char DNSServer[46];
    char Interface[257];
    char Type[513];
} cfg_dns_relay_forwarding_t;
int cfg_dns_relay_forwarding_tab_add(int id0);
int cfg_dns_relay_forwarding_tab_set(int id0, cfg_dns_relay_forwarding_t *p_cfg_dns_relay_forwarding);
int cfg_dns_relay_forwarding_tab_del(int id0);
int cfg_dns_relay_forwarding_tab_num_get(int **pp_index_array);
int cfg_dns_relay_forwarding_tab_get(int id0, cfg_dns_relay_forwarding_t **pp_cfg_dns_relay_forwarding);
char* cfg_nat_enable_get(int id0);
int cfg_nat_enable_set(int id0, char* val);
char* cfg_porttrigger_entry_Name_get(int id0);
int cfg_porttrigger_entry_Name_set(int id0, char* val);
char* cfg_porttrigger_entry_Template_get(int id0);
int cfg_porttrigger_entry_Template_set(int id0, char* val);
char* cfg_porttrigger_entry_TriggerPort_get(int id0);
int cfg_porttrigger_entry_TriggerPort_set(int id0, char* val);
char* cfg_porttrigger_entry_TriggerProtocol_get(int id0);
int cfg_porttrigger_entry_TriggerProtocol_set(int id0, char* val);
typedef struct cfg_porttrigger_entry_s {
    char id[8];
    char Name[41];
    char Template[33];
    char TriggerPort[16];
    char TriggerProtocol[6];
} cfg_porttrigger_entry_t;
int cfg_porttrigger_entry_tab_add(int id0);
int cfg_porttrigger_entry_tab_set(int id0, cfg_porttrigger_entry_t *p_cfg_porttrigger_entry);
int cfg_porttrigger_entry_tab_del(int id0);
int cfg_porttrigger_entry_tab_num_get(int **pp_index_array);
int cfg_porttrigger_entry_tab_get(int id0, cfg_porttrigger_entry_t **pp_cfg_porttrigger_entry);
char* cfg_porttrigger_tcp_external_port_PortStart_get(int id0, int id1);
int cfg_porttrigger_tcp_external_port_PortStart_set(int id0, int id1, char* val);
char* cfg_porttrigger_tcp_external_port_PortEnd_get(int id0, int id1);
int cfg_porttrigger_tcp_external_port_PortEnd_set(int id0, int id1, char* val);
typedef struct cfg_porttrigger_tcp_external_port_s {
    char id[8];
    char PortStart[16];
    char PortEnd[16];
} cfg_porttrigger_tcp_external_port_t;
int cfg_porttrigger_tcp_external_port_tab_add(int id0, int id1);
int cfg_porttrigger_tcp_external_port_tab_set(int id0, int id1, cfg_porttrigger_tcp_external_port_t *p_cfg_porttrigger_tcp_external_port);
int cfg_porttrigger_tcp_external_port_tab_del(int id0, int id1);
int cfg_porttrigger_tcp_external_port_tab_num_get(int id0, int **pp_index_array);
int cfg_porttrigger_tcp_external_port_tab_get(int id0, int id1, cfg_porttrigger_tcp_external_port_t **pp_cfg_porttrigger_tcp_external_port);
char* cfg_porttrigger_udp_external_port_PortStart_get(int id0, int id1);
int cfg_porttrigger_udp_external_port_PortStart_set(int id0, int id1, char* val);
char* cfg_porttrigger_udp_external_port_PortEnd_get(int id0, int id1);
int cfg_porttrigger_udp_external_port_PortEnd_set(int id0, int id1, char* val);
typedef struct cfg_porttrigger_udp_external_port_s {
    char id[8];
    char PortStart[16];
    char PortEnd[16];
} cfg_porttrigger_udp_external_port_t;
int cfg_porttrigger_udp_external_port_tab_add(int id0, int id1);
int cfg_porttrigger_udp_external_port_tab_set(int id0, int id1, cfg_porttrigger_udp_external_port_t *p_cfg_porttrigger_udp_external_port);
int cfg_porttrigger_udp_external_port_tab_del(int id0, int id1);
int cfg_porttrigger_udp_external_port_tab_num_get(int id0, int **pp_index_array);
int cfg_porttrigger_udp_external_port_tab_get(int id0, int id1, cfg_porttrigger_udp_external_port_t **pp_cfg_porttrigger_udp_external_port);
char* cfg_portfilter_entry_Name_get(int id0);
int cfg_portfilter_entry_Name_set(int id0, char* val);
char* cfg_portfilter_entry_Active_get(int id0);
int cfg_portfilter_entry_Active_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowTCP_get(int id0);
int cfg_portfilter_entry_DisallowTCP_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowUDP_get(int id0);
int cfg_portfilter_entry_DisallowUDP_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowHTTP_get(int id0);
int cfg_portfilter_entry_DisallowHTTP_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowHTTPS_get(int id0);
int cfg_portfilter_entry_DisallowHTTPS_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowSMTP_get(int id0);
int cfg_portfilter_entry_DisallowSMTP_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowPOP_get(int id0);
int cfg_portfilter_entry_DisallowPOP_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowNNTP_get(int id0);
int cfg_portfilter_entry_DisallowNNTP_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowFTP_get(int id0);
int cfg_portfilter_entry_DisallowFTP_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowTelnet_get(int id0);
int cfg_portfilter_entry_DisallowTelnet_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowDNS_get(int id0);
int cfg_portfilter_entry_DisallowDNS_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowSNMP_get(int id0);
int cfg_portfilter_entry_DisallowSNMP_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowVPNPPTP_get(int id0);
int cfg_portfilter_entry_DisallowVPNPPTP_set(int id0, char* val);
char* cfg_portfilter_entry_DisallowVPNL2TP_get(int id0);
int cfg_portfilter_entry_DisallowVPNL2TP_set(int id0, char* val);
char* cfg_portfilter_entry_HostList_get(int id0);
int cfg_portfilter_entry_HostList_set(int id0, char* val);
typedef struct cfg_portfilter_entry_s {
    char id[8];
    char Name[41];
    char Active[4];
    char DisallowTCP[4];
    char DisallowUDP[4];
    char DisallowHTTP[4];
    char DisallowHTTPS[4];
    char DisallowSMTP[4];
    char DisallowPOP[4];
    char DisallowNNTP[4];
    char DisallowFTP[4];
    char DisallowTelnet[4];
    char DisallowDNS[4];
    char DisallowSNMP[4];
    char DisallowVPNPPTP[4];
    char DisallowVPNL2TP[4];
    char HostList[257];
} cfg_portfilter_entry_t;
int cfg_portfilter_entry_tab_add(int id0);
int cfg_portfilter_entry_tab_set(int id0, cfg_portfilter_entry_t *p_cfg_portfilter_entry);
int cfg_portfilter_entry_tab_del(int id0);
int cfg_portfilter_entry_tab_num_get(int **pp_index_array);
int cfg_portfilter_entry_tab_get(int id0, cfg_portfilter_entry_t **pp_cfg_portfilter_entry);
char* cfg_internettimerule_entry_Name_get(int id0);
int cfg_internettimerule_entry_Name_set(int id0, char* val);
char* cfg_internettimerule_entry_Active_get(int id0);
int cfg_internettimerule_entry_Active_set(int id0, char* val);
char* cfg_internettimerule_entry_Mode_get(int id0);
int cfg_internettimerule_entry_Mode_set(int id0, char* val);
char* cfg_internettimerule_entry_DayTime_get(int id0);
int cfg_internettimerule_entry_DayTime_set(int id0, char* val);
char* cfg_internettimerule_entry_MonTime_get(int id0);
int cfg_internettimerule_entry_MonTime_set(int id0, char* val);
char* cfg_internettimerule_entry_TueTime_get(int id0);
int cfg_internettimerule_entry_TueTime_set(int id0, char* val);
char* cfg_internettimerule_entry_WedTime_get(int id0);
int cfg_internettimerule_entry_WedTime_set(int id0, char* val);
char* cfg_internettimerule_entry_ThuTime_get(int id0);
int cfg_internettimerule_entry_ThuTime_set(int id0, char* val);
char* cfg_internettimerule_entry_FriTime_get(int id0);
int cfg_internettimerule_entry_FriTime_set(int id0, char* val);
char* cfg_internettimerule_entry_StaTime_get(int id0);
int cfg_internettimerule_entry_StaTime_set(int id0, char* val);
char* cfg_internettimerule_entry_SunTime_get(int id0);
int cfg_internettimerule_entry_SunTime_set(int id0, char* val);
char* cfg_internettimerule_entry_HostList_get(int id0);
int cfg_internettimerule_entry_HostList_set(int id0, char* val);
typedef struct cfg_internettimerule_entry_s {
    char id[8];
    char Name[41];
    char Active[4];
    char Mode[17];
    char DayTime[13];
    char MonTime[13];
    char TueTime[13];
    char WedTime[13];
    char ThuTime[13];
    char FriTime[13];
    char StaTime[13];
    char SunTime[13];
    char HostList[257];
} cfg_internettimerule_entry_t;
int cfg_internettimerule_entry_tab_add(int id0);
int cfg_internettimerule_entry_tab_set(int id0, cfg_internettimerule_entry_t *p_cfg_internettimerule_entry);
int cfg_internettimerule_entry_tab_del(int id0);
int cfg_internettimerule_entry_tab_num_get(int **pp_index_array);
int cfg_internettimerule_entry_tab_get(int id0, cfg_internettimerule_entry_t **pp_cfg_internettimerule_entry);
char* cfg_portmapping_entry_Name_get(int id0);
int cfg_portmapping_entry_Name_set(int id0, char* val);
char* cfg_portmapping_entry_InternalClient_get(int id0);
int cfg_portmapping_entry_InternalClient_set(int id0, char* val);
char* cfg_portmapping_entry_HostId_get(int id0);
int cfg_portmapping_entry_HostId_set(int id0, char* val);
char* cfg_portmapping_entry_PtmpTabIdList_get(int id0);
int cfg_portmapping_entry_PtmpTabIdList_set(int id0, char* val);
typedef struct cfg_portmapping_entry_s {
    char id[8];
    char Name[41];
    char InternalClient[257];
    char HostId[16];
    char PtmpTabIdList[513];
} cfg_portmapping_entry_t;
int cfg_portmapping_entry_tab_add(int id0);
int cfg_portmapping_entry_tab_set(int id0, cfg_portmapping_entry_t *p_cfg_portmapping_entry);
int cfg_portmapping_entry_tab_del(int id0);
int cfg_portmapping_entry_tab_num_get(int **pp_index_array);
int cfg_portmapping_entry_tab_get(int id0, cfg_portmapping_entry_t **pp_cfg_portmapping_entry);
char* cfg_portmapping_tcp_ExternalPort_get(int id0, int id1);
int cfg_portmapping_tcp_ExternalPort_set(int id0, int id1, char* val);
char* cfg_portmapping_tcp_ExternalPortEndRange_get(int id0, int id1);
int cfg_portmapping_tcp_ExternalPortEndRange_set(int id0, int id1, char* val);
char* cfg_portmapping_tcp_InternalPort_get(int id0, int id1);
int cfg_portmapping_tcp_InternalPort_set(int id0, int id1, char* val);
char* cfg_portmapping_tcp_PtmpTabId_get(int id0, int id1);
int cfg_portmapping_tcp_PtmpTabId_set(int id0, int id1, char* val);
typedef struct cfg_portmapping_tcp_s {
    char id[8];
    char ExternalPort[16];
    char ExternalPortEndRange[16];
    char InternalPort[16];
    char PtmpTabId[16];
} cfg_portmapping_tcp_t;
int cfg_portmapping_tcp_tab_add(int id0, int id1);
int cfg_portmapping_tcp_tab_set(int id0, int id1, cfg_portmapping_tcp_t *p_cfg_portmapping_tcp);
int cfg_portmapping_tcp_tab_del(int id0, int id1);
int cfg_portmapping_tcp_tab_num_get(int id0, int **pp_index_array);
int cfg_portmapping_tcp_tab_get(int id0, int id1, cfg_portmapping_tcp_t **pp_cfg_portmapping_tcp);
char* cfg_portmapping_udp_ExternalPort_get(int id0, int id1);
int cfg_portmapping_udp_ExternalPort_set(int id0, int id1, char* val);
char* cfg_portmapping_udp_ExternalPortEndRange_get(int id0, int id1);
int cfg_portmapping_udp_ExternalPortEndRange_set(int id0, int id1, char* val);
char* cfg_portmapping_udp_InternalPort_get(int id0, int id1);
int cfg_portmapping_udp_InternalPort_set(int id0, int id1, char* val);
char* cfg_portmapping_udp_PtmpTabId_get(int id0, int id1);
int cfg_portmapping_udp_PtmpTabId_set(int id0, int id1, char* val);
typedef struct cfg_portmapping_udp_s {
    char id[8];
    char ExternalPort[16];
    char ExternalPortEndRange[16];
    char InternalPort[16];
    char PtmpTabId[16];
} cfg_portmapping_udp_t;
int cfg_portmapping_udp_tab_add(int id0, int id1);
int cfg_portmapping_udp_tab_set(int id0, int id1, cfg_portmapping_udp_t *p_cfg_portmapping_udp);
int cfg_portmapping_udp_tab_del(int id0, int id1);
int cfg_portmapping_udp_tab_num_get(int id0, int **pp_index_array);
int cfg_portmapping_udp_tab_get(int id0, int id1, cfg_portmapping_udp_t **pp_cfg_portmapping_udp);
char* cfg_ptmp_entry_Enable_get(int id0);
int cfg_ptmp_entry_Enable_set(int id0, char* val);
char* cfg_ptmp_entry_alias_get(int id0);
int cfg_ptmp_entry_alias_set(int id0, char* val);
char* cfg_ptmp_entry_Interface_get(int id0);
int cfg_ptmp_entry_Interface_set(int id0, char* val);
char* cfg_ptmp_entry_AllInterfaces_get(int id0);
int cfg_ptmp_entry_AllInterfaces_set(int id0, char* val);
char* cfg_ptmp_entry_LeaseDuration_get(int id0);
int cfg_ptmp_entry_LeaseDuration_set(int id0, char* val);
char* cfg_ptmp_entry_RemoteHost_get(int id0);
int cfg_ptmp_entry_RemoteHost_set(int id0, char* val);
char* cfg_ptmp_entry_X_SC_RemoteHostEnd_get(int id0);
int cfg_ptmp_entry_X_SC_RemoteHostEnd_set(int id0, char* val);
char* cfg_ptmp_entry_ExternalPort_get(int id0);
int cfg_ptmp_entry_ExternalPort_set(int id0, char* val);
char* cfg_ptmp_entry_ExternalPortEndRange_get(int id0);
int cfg_ptmp_entry_ExternalPortEndRange_set(int id0, char* val);
char* cfg_ptmp_entry_InternalPort_get(int id0);
int cfg_ptmp_entry_InternalPort_set(int id0, char* val);
char* cfg_ptmp_entry_Protocol_get(int id0);
int cfg_ptmp_entry_Protocol_set(int id0, char* val);
char* cfg_ptmp_entry_InternalClient_get(int id0);
int cfg_ptmp_entry_InternalClient_set(int id0, char* val);
char* cfg_ptmp_entry_X_SC_HostId_get(int id0);
int cfg_ptmp_entry_X_SC_HostId_set(int id0, char* val);
char* cfg_ptmp_entry_Description_get(int id0);
int cfg_ptmp_entry_Description_set(int id0, char* val);
typedef struct cfg_ptmp_entry_s {
    char id[8];
    char Enable[4];
    char Alias[65];
    char Interface[257];
    char AllInterfaces[4];
    char LeaseDuration[16];
    char RemoteHost[513];
    char X_SC_RemoteHostEnd[513];
    char ExternalPort[16];
    char ExternalPortEndRange[16];
    char InternalPort[16];
    char Protocol[513];
    char InternalClient[257];
    char X_SC_HostId[16];
    char Description[257];
} cfg_ptmp_entry_t;
int cfg_ptmp_entry_tab_add(int id0);
int cfg_ptmp_entry_tab_set(int id0, cfg_ptmp_entry_t *p_cfg_ptmp_entry);
int cfg_ptmp_entry_tab_del(int id0);
int cfg_ptmp_entry_tab_num_get(int **pp_index_array);
int cfg_ptmp_entry_tab_get(int id0, cfg_ptmp_entry_t **pp_cfg_ptmp_entry);
char* cfg_wan_dhcp_client_sentoption_get(int id0, int id1);
int cfg_wan_dhcp_client_sentoption_set(int id0, int id1, char* val);
char* cfg_wan_dhcp_client_sentoption_value_get(int id0, int id1);
int cfg_wan_dhcp_client_sentoption_value_set(int id0, int id1, char* val);
char* cfg_wan_dhcp_client_reqoption_value_get(int id0, int id1);
int cfg_wan_dhcp_client_reqoption_value_set(int id0, int id1, char* val);
char* cfg_lan_dhcp_server_enable_get();
int cfg_lan_dhcp_server_enable_set(char* val);
char* cfg_lan_dhcp_conserv_enable_get(int id0);
int cfg_lan_dhcp_conserv_enable_set(int id0, char* val);
char* cfg_lan_dhcp_conserv_interface_get(int id0);
int cfg_lan_dhcp_conserv_interface_set(int id0, char* val);
char* cfg_lan_dhcp_conserv_vendor_id_get(int id0);
int cfg_lan_dhcp_conserv_vendor_id_set(int id0, char* val);
char* cfg_lan_dhcp_conserv_mac_get(int id0);
int cfg_lan_dhcp_conserv_mac_set(int id0, char* val);
char* cfg_lan_dhcp_server_start_ip_get(int id0);
int cfg_lan_dhcp_server_start_ip_set(int id0, char* val);
char* cfg_lan_dhcp_server_end_ip_get(int id0);
int cfg_lan_dhcp_server_end_ip_set(int id0, char* val);
char* cfg_lan_dhcp_server_reserved_ip_get(int id0);
int cfg_lan_dhcp_server_reserved_ip_set(int id0, char* val);
char* cfg_lan_dhcp_server_domain_name_get(int id0);
int cfg_lan_dhcp_server_domain_name_set(int id0, char* val);
char* cfg_lan_dhcp_server_ip_routers_get(int id0);
int cfg_lan_dhcp_server_ip_routers_set(int id0, char* val);
char* cfg_lan_dhcp_server_lease_time_get(int id0);
int cfg_lan_dhcp_server_lease_time_set(int id0, char* val);
char* cfg_lan_dhcp_static_addr_devname_get(int id0, int id1);
int cfg_lan_dhcp_static_addr_devname_set(int id0, int id1, char* val);
char* cfg_lan_reserved_ip_entry_PhyAddress_get(int id0, int id1);
int cfg_lan_reserved_ip_entry_PhyAddress_set(int id0, int id1, char* val);
char* cfg_lan_reserved_ip_entry_IPAddress_get(int id0, int id1);
int cfg_lan_reserved_ip_entry_IPAddress_set(int id0, int id1, char* val);
char* cfg_lan_reserved_ip_entry_HostID_get(int id0, int id1);
int cfg_lan_reserved_ip_entry_HostID_set(int id0, int id1, char* val);
char* cfg_lan_reserved_ip_entry_RefCnt_get(int id0, int id1);
int cfg_lan_reserved_ip_entry_RefCnt_set(int id0, int id1, char* val);
typedef struct cfg_lan_reserved_ip_entry_s {
    char id[8];
    char Alias[65];
    char Chaddr[18];
    char Yiaddr[16];
    char X_SC_HostID[16];
    char X_SC_RefCnt[16];
} cfg_lan_reserved_ip_entry_t;
int cfg_lan_reserved_ip_entry_tab_add(int id0, int id1);
int cfg_lan_reserved_ip_entry_tab_set(int id0, int id1, cfg_lan_reserved_ip_entry_t *p_cfg_lan_reserved_ip_entry);
int cfg_lan_reserved_ip_entry_tab_del(int id0, int id1);
int cfg_lan_reserved_ip_entry_tab_num_get(int id0, int **pp_index_array);
int cfg_lan_reserved_ip_entry_tab_get(int id0, int id1, cfg_lan_reserved_ip_entry_t **pp_cfg_lan_reserved_ip_entry);
char* cfg_lan_dhcp_server_option_tag_get(int id0, int id1);
int cfg_lan_dhcp_server_option_tag_set(int id0, int id1, char* val);
char* cfg_lan_dhcp_server_option_value_get(int id0, int id1);
int cfg_lan_dhcp_server_option_value_set(int id0, int id1, char* val);
char* cfg_lan_dhcp_server_client_list_Alias_get(int id0, int id1);
int cfg_lan_dhcp_server_client_list_Alias_set(int id0, int id1, char* val);
char* cfg_lan_dhcp_server_client_list_Chaddr_get(int id0, int id1);
int cfg_lan_dhcp_server_client_list_Chaddr_set(int id0, int id1, char* val);
char* cfg_lan_dhcp_server_client_list_Active_get(int id0, int id1);
int cfg_lan_dhcp_server_client_list_Active_set(int id0, int id1, char* val);
typedef struct cfg_lan_dhcp_server_client_list_s {
    char id[8];
    char Alias[65];
    char Chaddr[18];
    char Active[4];
} cfg_lan_dhcp_server_client_list_t;
int cfg_lan_dhcp_server_client_list_tab_add(int id0, int id1);
int cfg_lan_dhcp_server_client_list_tab_set(int id0, int id1, cfg_lan_dhcp_server_client_list_t *p_cfg_lan_dhcp_server_client_list);
int cfg_lan_dhcp_server_client_list_tab_del(int id0, int id1);
int cfg_lan_dhcp_server_client_list_tab_num_get(int id0, int **pp_index_array);
int cfg_lan_dhcp_server_client_list_tab_get(int id0, int id1, cfg_lan_dhcp_server_client_list_t **pp_cfg_lan_dhcp_server_client_list);
char* cfg_lan_dhcp_server_client_ipv4_list_IPAddress_get(int id0, int id1, int id2);
int cfg_lan_dhcp_server_client_ipv4_list_IPAddress_set(int id0, int id1, int id2, char* val);
char* cfg_lan_dhcp_server_client_ipv4_list_LeaseTimeRemaining_get(int id0, int id1, int id2);
int cfg_lan_dhcp_server_client_ipv4_list_LeaseTimeRemaining_set(int id0, int id1, int id2, char* val);
char* cfg_lan_dhcp_server_client_ipv4_list_X_SC_LeaseTimeRemaining_get(int id0, int id1, int id2);
int cfg_lan_dhcp_server_client_ipv4_list_X_SC_LeaseTimeRemaining_set(int id0, int id1, int id2, char* val);
typedef struct cfg_lan_dhcp_server_client_ipv4_list_s {
    char id[8];
    char IPAddress[16];
    char LeaseTimeRemaining[257];
    char X_SC_LeaseTimeRemaining[16];
} cfg_lan_dhcp_server_client_ipv4_list_t;
int cfg_lan_dhcp_server_client_ipv4_list_tab_add(int id0, int id1, int id2);
int cfg_lan_dhcp_server_client_ipv4_list_tab_set(int id0, int id1, int id2, cfg_lan_dhcp_server_client_ipv4_list_t *p_cfg_lan_dhcp_server_client_ipv4_list);
int cfg_lan_dhcp_server_client_ipv4_list_tab_del(int id0, int id1, int id2);
int cfg_lan_dhcp_server_client_ipv4_list_tab_num_get(int id0, int id1, int **pp_index_array);
int cfg_lan_dhcp_server_client_ipv4_list_tab_get(int id0, int id1, int id2, cfg_lan_dhcp_server_client_ipv4_list_t **pp_cfg_lan_dhcp_server_client_ipv4_list);
char* cfg_lan_dhcp_server_client_option_list_Tag_get(int id0, int id1, int id2);
int cfg_lan_dhcp_server_client_option_list_Tag_set(int id0, int id1, int id2, char* val);
char* cfg_lan_dhcp_server_client_option_list_Value_get(int id0, int id1, int id2);
int cfg_lan_dhcp_server_client_option_list_Value_set(int id0, int id1, int id2, char* val);
typedef struct cfg_lan_dhcp_server_client_option_list_s {
    char id[8];
    char Tag[16];
    char Value[257];
} cfg_lan_dhcp_server_client_option_list_t;
int cfg_lan_dhcp_server_client_option_list_tab_add(int id0, int id1, int id2);
int cfg_lan_dhcp_server_client_option_list_tab_set(int id0, int id1, int id2, cfg_lan_dhcp_server_client_option_list_t *p_cfg_lan_dhcp_server_client_option_list);
int cfg_lan_dhcp_server_client_option_list_tab_del(int id0, int id1, int id2);
int cfg_lan_dhcp_server_client_option_list_tab_num_get(int id0, int id1, int **pp_index_array);
int cfg_lan_dhcp_server_client_option_list_tab_get(int id0, int id1, int id2, cfg_lan_dhcp_server_client_option_list_t **pp_cfg_lan_dhcp_server_client_option_list);
char* cfg_dhcpv6_client_Enable_get(int id0);
int cfg_dhcpv6_client_Enable_set(int id0, char* val);
char* cfg_dhcpv6_client_Interface_get(int id0);
int cfg_dhcpv6_client_Interface_set(int id0, char* val);
char* cfg_dhcpv6_client_Status_get(int id0);
int cfg_dhcpv6_client_Status_set(int id0, char* val);
char* cfg_dhcpv6_client_DUID_get(int id0);
int cfg_dhcpv6_client_DUID_set(int id0, char* val);
char* cfg_dhcpv6_client_RequestAddresses_get(int id0);
int cfg_dhcpv6_client_RequestAddresses_set(int id0, char* val);
char* cfg_dhcpv6_client_RequestPrefixes_get(int id0);
int cfg_dhcpv6_client_RequestPrefixes_set(int id0, char* val);
char* cfg_dhcpv6_client_RapidCommit_get(int id0);
int cfg_dhcpv6_client_RapidCommit_set(int id0, char* val);
char* cfg_dhcpv6_client_Renew_get(int id0);
int cfg_dhcpv6_client_Renew_set(int id0, char* val);
char* cfg_dhcpv6_client_SuggestedT1_get(int id0);
int cfg_dhcpv6_client_SuggestedT1_set(int id0, char* val);
char* cfg_dhcpv6_client_SuggestedT2_get(int id0);
int cfg_dhcpv6_client_SuggestedT2_set(int id0, char* val);
char* cfg_dhcpv6_client_SupportedOptions_get(int id0);
int cfg_dhcpv6_client_SupportedOptions_set(int id0, char* val);
char* cfg_dhcpv6_client_RequestedOptions_get(int id0);
int cfg_dhcpv6_client_RequestedOptions_set(int id0, char* val);
typedef struct cfg_dhcpv6_client_s {
    char id[8];
    char Enable[4];
    char Interface[257];
    char Status[513];
    char DUID[257];
    char RequestAddresses[4];
    char RequestPrefixes[4];
    char RapidCommit[4];
    char Renew[4];
    char SuggestedT1[16];
    char SuggestedT2[16];
    char SupportedOptions[513];
    char RequestedOptions[513];
} cfg_dhcpv6_client_t;
int cfg_dhcpv6_client_tab_add(int id0);
int cfg_dhcpv6_client_tab_set(int id0, cfg_dhcpv6_client_t *p_cfg_dhcpv6_client);
int cfg_dhcpv6_client_tab_del(int id0);
int cfg_dhcpv6_client_tab_num_get(int **pp_index_array);
int cfg_dhcpv6_client_tab_get(int id0, cfg_dhcpv6_client_t **pp_cfg_dhcpv6_client);
char* cfg_dhcpv6_client_server_SourceAddress_get(int id0, int id1);
int cfg_dhcpv6_client_server_SourceAddress_set(int id0, int id1, char* val);
char* cfg_dhcpv6_client_server_DUID_get(int id0, int id1);
int cfg_dhcpv6_client_server_DUID_set(int id0, int id1, char* val);
char* cfg_dhcpv6_client_server_InformationRefreshTime_get(int id0, int id1);
int cfg_dhcpv6_client_server_InformationRefreshTime_set(int id0, int id1, char* val);
typedef struct cfg_dhcpv6_client_server_s {
    char id[8];
    char SourceAddress[513];
    char DUID[257];
    char InformationRefreshTime[257];
} cfg_dhcpv6_client_server_t;
int cfg_dhcpv6_client_server_tab_add(int id0, int id1);
int cfg_dhcpv6_client_server_tab_set(int id0, int id1, cfg_dhcpv6_client_server_t *p_cfg_dhcpv6_client_server);
int cfg_dhcpv6_client_server_tab_del(int id0, int id1);
int cfg_dhcpv6_client_server_tab_num_get(int id0, int **pp_index_array);
int cfg_dhcpv6_client_server_tab_get(int id0, int id1, cfg_dhcpv6_client_server_t **pp_cfg_dhcpv6_client_server);
char* cfg_dhcpv6_client_sentoption_Enable_get(int id0, int id1);
int cfg_dhcpv6_client_sentoption_Enable_set(int id0, int id1, char* val);
char* cfg_dhcpv6_client_sentoption_Tag_get(int id0, int id1);
int cfg_dhcpv6_client_sentoption_Tag_set(int id0, int id1, char* val);
char* cfg_dhcpv6_client_sentoption_Value_get(int id0, int id1);
int cfg_dhcpv6_client_sentoption_Value_set(int id0, int id1, char* val);
typedef struct cfg_dhcpv6_client_sentoption_s {
    char id[8];
    char Enable[4];
    char Tag[16];
    char Value[257];
} cfg_dhcpv6_client_sentoption_t;
int cfg_dhcpv6_client_sentoption_tab_add(int id0, int id1);
int cfg_dhcpv6_client_sentoption_tab_set(int id0, int id1, cfg_dhcpv6_client_sentoption_t *p_cfg_dhcpv6_client_sentoption);
int cfg_dhcpv6_client_sentoption_tab_del(int id0, int id1);
int cfg_dhcpv6_client_sentoption_tab_num_get(int id0, int **pp_index_array);
int cfg_dhcpv6_client_sentoption_tab_get(int id0, int id1, cfg_dhcpv6_client_sentoption_t **pp_cfg_dhcpv6_client_sentoption);
char* cfg_dhcpv6_client_receivedoption_Tag_get(int id0, int id1);
int cfg_dhcpv6_client_receivedoption_Tag_set(int id0, int id1, char* val);
char* cfg_dhcpv6_client_receivedoption_Value_get(int id0, int id1);
int cfg_dhcpv6_client_receivedoption_Value_set(int id0, int id1, char* val);
char* cfg_dhcpv6_client_receivedoption_Server_get(int id0, int id1);
int cfg_dhcpv6_client_receivedoption_Server_set(int id0, int id1, char* val);
typedef struct cfg_dhcpv6_client_receivedoption_s {
    char id[8];
    char Tag[16];
    char Value[257];
    char Server[513];
} cfg_dhcpv6_client_receivedoption_t;
int cfg_dhcpv6_client_receivedoption_tab_add(int id0, int id1);
int cfg_dhcpv6_client_receivedoption_tab_set(int id0, int id1, cfg_dhcpv6_client_receivedoption_t *p_cfg_dhcpv6_client_receivedoption);
int cfg_dhcpv6_client_receivedoption_tab_del(int id0, int id1);
int cfg_dhcpv6_client_receivedoption_tab_num_get(int id0, int **pp_index_array);
int cfg_dhcpv6_client_receivedoption_tab_get(int id0, int id1, cfg_dhcpv6_client_receivedoption_t **pp_cfg_dhcpv6_client_receivedoption);
char* cfg_dhcpv6_server_Enable_get();
int cfg_dhcpv6_server_Enable_set(char* val);
char* cfg_dhcpv6_server_pool_Enable_get(int id0);
int cfg_dhcpv6_server_pool_Enable_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_Status_get(int id0);
int cfg_dhcpv6_server_pool_Status_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_Order_get(int id0);
int cfg_dhcpv6_server_pool_Order_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_Interface_get(int id0);
int cfg_dhcpv6_server_pool_Interface_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_DUID_get(int id0);
int cfg_dhcpv6_server_pool_DUID_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_VendorClassID_get(int id0);
int cfg_dhcpv6_server_pool_VendorClassID_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_UserClassID_get(int id0);
int cfg_dhcpv6_server_pool_UserClassID_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_SourceAddress_get(int id0);
int cfg_dhcpv6_server_pool_SourceAddress_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_SourceAddressMask_get(int id0);
int cfg_dhcpv6_server_pool_SourceAddressMask_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_IANAEnable_get(int id0);
int cfg_dhcpv6_server_pool_IANAEnable_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_IANAPrefixes_get(int id0);
int cfg_dhcpv6_server_pool_IANAPrefixes_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_IAPDEnable_get(int id0);
int cfg_dhcpv6_server_pool_IAPDEnable_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_IAPDPrefixes_get(int id0);
int cfg_dhcpv6_server_pool_IAPDPrefixes_set(int id0, char* val);
char* cfg_dhcpv6_server_pool_IAPDAddLength_get(int id0);
int cfg_dhcpv6_server_pool_IAPDAddLength_set(int id0, char* val);
typedef struct cfg_dhcpv6_server_pool_s {
    char id[8];
    char Enable[4];
    char Status[513];
    char Order[16];
    char Interface[257];
    char DUID[257];
    char VendorClassID[257];
    char UserClassID[257];
    char SourceAddress[513];
    char SourceAddressMask[513];
    char IANAEnable[4];
    char IANAPrefixes[513];
    char IAPDEnable[4];
    char IAPDPrefixes[513];
    char IAPDAddLength[16];
} cfg_dhcpv6_server_pool_t;
int cfg_dhcpv6_server_pool_tab_add(int id0);
int cfg_dhcpv6_server_pool_tab_set(int id0, cfg_dhcpv6_server_pool_t *p_cfg_dhcpv6_server_pool);
int cfg_dhcpv6_server_pool_tab_del(int id0);
int cfg_dhcpv6_server_pool_tab_num_get(int **pp_index_array);
int cfg_dhcpv6_server_pool_tab_get(int id0, cfg_dhcpv6_server_pool_t **pp_cfg_dhcpv6_server_pool);
char* cfg_dhcpv6_server_pool_client_SourceAddress_get(int id0, int id1);
int cfg_dhcpv6_server_pool_client_SourceAddress_set(int id0, int id1, char* val);
char* cfg_dhcpv6_server_pool_client_Active_get(int id0, int id1);
int cfg_dhcpv6_server_pool_client_Active_set(int id0, int id1, char* val);
typedef struct cfg_dhcpv6_server_pool_client_s {
    char id[8];
    char SourceAddress[513];
    char Active[4];
} cfg_dhcpv6_server_pool_client_t;
int cfg_dhcpv6_server_pool_client_tab_add(int id0, int id1);
int cfg_dhcpv6_server_pool_client_tab_set(int id0, int id1, cfg_dhcpv6_server_pool_client_t *p_cfg_dhcpv6_server_pool_client);
int cfg_dhcpv6_server_pool_client_tab_del(int id0, int id1);
int cfg_dhcpv6_server_pool_client_tab_num_get(int id0, int **pp_index_array);
int cfg_dhcpv6_server_pool_client_tab_get(int id0, int id1, cfg_dhcpv6_server_pool_client_t **pp_cfg_dhcpv6_server_pool_client);
char* cfg_dhcpv6_server_pool_client_ipv6address_IPAddress_get(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6address_IPAddress_set(int id0, int id1, int id2, char* val);
char* cfg_dhcpv6_server_pool_client_ipv6address_PreferredLifetime_get(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6address_PreferredLifetime_set(int id0, int id1, int id2, char* val);
char* cfg_dhcpv6_server_pool_client_ipv6address_ValidLifetime_get(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6address_ValidLifetime_set(int id0, int id1, int id2, char* val);
typedef struct cfg_dhcpv6_server_pool_client_ipv6address_s {
    char id[8];
    char IPAddress[513];
    char PreferredLifetime[257];
    char ValidLifetime[257];
} cfg_dhcpv6_server_pool_client_ipv6address_t;
int cfg_dhcpv6_server_pool_client_ipv6address_tab_add(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6address_tab_set(int id0, int id1, int id2, cfg_dhcpv6_server_pool_client_ipv6address_t *p_cfg_dhcpv6_server_pool_client_ipv6address);
int cfg_dhcpv6_server_pool_client_ipv6address_tab_del(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6address_tab_num_get(int id0, int id1, int **pp_index_array);
int cfg_dhcpv6_server_pool_client_ipv6address_tab_get(int id0, int id1, int id2, cfg_dhcpv6_server_pool_client_ipv6address_t **pp_cfg_dhcpv6_server_pool_client_ipv6address);
char* cfg_dhcpv6_server_pool_client_ipv6prefix_Prefix_get(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6prefix_Prefix_set(int id0, int id1, int id2, char* val);
char* cfg_dhcpv6_server_pool_client_ipv6prefix_PreferredLifetime_get(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6prefix_PreferredLifetime_set(int id0, int id1, int id2, char* val);
char* cfg_dhcpv6_server_pool_client_ipv6prefix_ValidLifetime_get(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6prefix_ValidLifetime_set(int id0, int id1, int id2, char* val);
typedef struct cfg_dhcpv6_server_pool_client_ipv6prefix_s {
    char id[8];
    char Prefix[513];
    char PreferredLifetime[257];
    char ValidLifetime[257];
} cfg_dhcpv6_server_pool_client_ipv6prefix_t;
int cfg_dhcpv6_server_pool_client_ipv6prefix_tab_add(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6prefix_tab_set(int id0, int id1, int id2, cfg_dhcpv6_server_pool_client_ipv6prefix_t *p_cfg_dhcpv6_server_pool_client_ipv6prefix);
int cfg_dhcpv6_server_pool_client_ipv6prefix_tab_del(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_ipv6prefix_tab_num_get(int id0, int id1, int **pp_index_array);
int cfg_dhcpv6_server_pool_client_ipv6prefix_tab_get(int id0, int id1, int id2, cfg_dhcpv6_server_pool_client_ipv6prefix_t **pp_cfg_dhcpv6_server_pool_client_ipv6prefix);
char* cfg_dhcpv6_server_pool_client_option_Tag_get(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_option_Tag_set(int id0, int id1, int id2, char* val);
char* cfg_dhcpv6_server_pool_client_option_Value_get(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_option_Value_set(int id0, int id1, int id2, char* val);
typedef struct cfg_dhcpv6_server_pool_client_option_s {
    char id[8];
    char Tag[16];
    char Value[257];
} cfg_dhcpv6_server_pool_client_option_t;
int cfg_dhcpv6_server_pool_client_option_tab_add(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_option_tab_set(int id0, int id1, int id2, cfg_dhcpv6_server_pool_client_option_t *p_cfg_dhcpv6_server_pool_client_option);
int cfg_dhcpv6_server_pool_client_option_tab_del(int id0, int id1, int id2);
int cfg_dhcpv6_server_pool_client_option_tab_num_get(int id0, int id1, int **pp_index_array);
int cfg_dhcpv6_server_pool_client_option_tab_get(int id0, int id1, int id2, cfg_dhcpv6_server_pool_client_option_t **pp_cfg_dhcpv6_server_pool_client_option);
char* cfg_dhcpv6_server_pool_option_Enable_get(int id0, int id1);
int cfg_dhcpv6_server_pool_option_Enable_set(int id0, int id1, char* val);
char* cfg_dhcpv6_server_pool_option_Tag_get(int id0, int id1);
int cfg_dhcpv6_server_pool_option_Tag_set(int id0, int id1, char* val);
char* cfg_dhcpv6_server_pool_option_Value_get(int id0, int id1);
int cfg_dhcpv6_server_pool_option_Value_set(int id0, int id1, char* val);
typedef struct cfg_dhcpv6_server_pool_option_s {
    char id[8];
    char Enable[4];
    char Tag[16];
    char Value[257];
} cfg_dhcpv6_server_pool_option_t;
int cfg_dhcpv6_server_pool_option_tab_add(int id0, int id1);
int cfg_dhcpv6_server_pool_option_tab_set(int id0, int id1, cfg_dhcpv6_server_pool_option_t *p_cfg_dhcpv6_server_pool_option);
int cfg_dhcpv6_server_pool_option_tab_del(int id0, int id1);
int cfg_dhcpv6_server_pool_option_tab_num_get(int id0, int **pp_index_array);
int cfg_dhcpv6_server_pool_option_tab_get(int id0, int id1, cfg_dhcpv6_server_pool_option_t **pp_cfg_dhcpv6_server_pool_option);
char* cfg_firewall_ipv4_remote_ping_enable_get();
int cfg_firewall_ipv4_remote_ping_enable_set(char* val);
char* cfg_firewall_ipv6_remote_ping_enable_get();
int cfg_firewall_ipv6_remote_ping_enable_set(char* val);
char* cfg_umts_status_get();
int cfg_umts_status_set(char* val);
char* cfg_umts_autoconnect_get();
int cfg_umts_autoconnect_set(char* val);
char* cfg_umts_serialnumber_get();
int cfg_umts_serialnumber_set(char* val);
char* cfg_umts_pincode_get();
int cfg_umts_pincode_set(char* val);
char* cfg_umts_newpincode_get();
int cfg_umts_newpincode_set(char* val);
char* cfg_umts_puk_get();
int cfg_umts_puk_set(char* val);
char* cfg_umts_plugintime_get();
int cfg_umts_plugintime_set(char* val);
char* cfg_umts_pinstatus_get();
int cfg_umts_pinstatus_set(char* val);
char* cfg_umts_simstatus_get();
int cfg_umts_simstatus_set(char* val);
char* cfg_umts_connectstatus_get();
int cfg_umts_connectstatus_set(char* val);
char* cfg_umts_voicestatus_get();
int cfg_umts_voicestatus_set(char* val);
char* cfg_umts_networksignal_get();
int cfg_umts_networksignal_set(char* val);
char* cfg_umts_networkmode_get();
int cfg_umts_networkmode_set(char* val);
char* cfg_lsdcc_state_get();
int cfg_lsdcc_state_set(char* val);
char* cfg_lsdcc_config_name_get();
int cfg_lsdcc_config_name_set(char* val);
char* cfg_lsdcc_reset_name_get();
int cfg_lsdcc_reset_name_set(char* val);
char* cfg_lsdcc_config_password_get();
int cfg_lsdcc_config_password_set(char* val);
char* cfg_lsdcc_reset_password_get();
int cfg_lsdcc_reset_password_set(char* val);
char* cfg_lsdcc_securityport_get();
int cfg_lsdcc_securityport_set(char* val);
char* cfg_1905_Enable_get();
int cfg_1905_Enable_set(char* val);
char* cfg_fon_Enable_get();
int cfg_fon_Enable_set(char* val);
char* cfg_fon_HelloDelay_get();
int cfg_fon_HelloDelay_set(char* val);
char* cfg_fon_HelloRetransmissionDelay_get();
int cfg_fon_HelloRetransmissionDelay_set(char* val);
char* cfg_fon_Status_get();
int cfg_fon_Status_set(char* val);
char* cfg_fon_SSID_get();
int cfg_fon_SSID_set(char* val);
char* cfg_fon_Key_get();
int cfg_fon_Key_set(char* val);
char* cfg_fon_ValidRealms_get();
int cfg_fon_ValidRealms_set(char* val);
char* cfg_fon_MaxUsersAllowed_get();
int cfg_fon_MaxUsersAllowed_set(char* val);
char* cfg_fon_Tunnel_MaxRetries_get();
int cfg_fon_Tunnel_MaxRetries_set(char* val);
char* cfg_fon_Interval_get();
int cfg_fon_Interval_set(char* val);
char* cfg_fon_PPPIdleTimeout_get();
int cfg_fon_PPPIdleTimeout_set(char* val);
char* cfg_fon_Lease_get();
int cfg_fon_Lease_set(char* val);
char* cfg_fon_LNSServer1_get();
int cfg_fon_LNSServer1_set(char* val);
char* cfg_fon_LNSServer2_get();
int cfg_fon_LNSServer2_set(char* val);
char* cfg_fon_PPP_LcpEchoInterval_get();
int cfg_fon_PPP_LcpEchoInterval_set(char* val);
char* cfg_fon_PPP_LcpEchoFailure_get();
int cfg_fon_PPP_LcpEchoFailure_set(char* val);
char* cfg_fon_PPP_PapRestart_get();
int cfg_fon_PPP_PapRestart_set(char* val);
char* cfg_fon_PPP_PapMaxAuthreq_get();
int cfg_fon_PPP_PapMaxAuthreq_set(char* val);
char* cfg_fon_RadiusServer1_get();
int cfg_fon_RadiusServer1_set(char* val);
char* cfg_fon_RadiusServer2_get();
int cfg_fon_RadiusServer2_set(char* val);
char* cfg_fon_RadiusSecret_get();
int cfg_fon_RadiusSecret_set(char* val);
char* cfg_fon_RadiusRetryIteration_get();
int cfg_fon_RadiusRetryIteration_set(char* val);
char* cfg_fon_RadiusRetryServer_get();
int cfg_fon_RadiusRetryServer_set(char* val);
char* cfg_fon_RadiusTimeout_get();
int cfg_fon_RadiusTimeout_set(char* val);
char* cfg_fon_L2TP_RetransmissionDelay_get();
int cfg_fon_L2TP_RetransmissionDelay_set(char* val);
char* cfg_fon_Suffix_get();
int cfg_fon_Suffix_set(char* val);
char* cfg_fon_PeriodOnline_get();
int cfg_fon_PeriodOnline_set(char* val);
char* cfg_fon_PeriodOffline_get();
int cfg_fon_PeriodOffline_set(char* val);
char* cfg_fon_PeriodFastDetection_get();
int cfg_fon_PeriodFastDetection_set(char* val);
char* cfg_fon_PeriodTimeout_get();
int cfg_fon_PeriodTimeout_set(char* val);
char* cfg_fon_Host_get();
int cfg_fon_Host_set(char* val);
char* cfg_fon_Port_get();
int cfg_fon_Port_set(char* val);
char* cfg_fon_Retries_get();
int cfg_fon_Retries_set(char* val);
char* cfg_fon_Uamsecret_get();
int cfg_fon_Uamsecret_set(char* val);
char* cfg_fon_MinBwPercentage_get();
int cfg_fon_MinBwPercentage_set(char* val);
char* cfg_fon_MaxBwPercentage_get();
int cfg_fon_MaxBwPercentage_set(char* val);
char* cfg_fon_st_Sessions_get();
int cfg_fon_st_Sessions_set(char* val);
char* cfg_fon_st_Users_get();
int cfg_fon_st_Users_set(char* val);
char* cfg_fon_st_NAU_get();
int cfg_fon_st_NAU_set(char* val);
char* cfg_fon_st_AF_get();
int cfg_fon_st_AF_set(char* val);
char* cfg_fon_st_TotalBytesSent_get();
int cfg_fon_st_TotalBytesSent_set(char* val);
char* cfg_fon_st_TotalBytesReceived_get();
int cfg_fon_st_TotalBytesReceived_set(char* val);
char* cfg_fon_ss_UsersOnline_get();
int cfg_fon_ss_UsersOnline_set(char* val);
char* cfg_fon_ss_Start_get();
int cfg_fon_ss_Start_set(char* val);
char* cfg_fon_ss_Users_get();
int cfg_fon_ss_Users_set(char* val);
char* cfg_fon_ss_NAU_get();
int cfg_fon_ss_NAU_set(char* val);
char* cfg_fon_ss_AF_get();
int cfg_fon_ss_AF_set(char* val);
char* cfg_fon_ss_TotalBytesSent_get();
int cfg_fon_ss_TotalBytesSent_set(char* val);
char* cfg_fon_ss_TotalBytesReceived_get();
int cfg_fon_ss_TotalBytesReceived_set(char* val);
char* cfg_video_igmp_MaxGroups_get();
int cfg_video_igmp_MaxGroups_set(char* val);
char* cfg_video_igmp_MaxSubscribers_get();
int cfg_video_igmp_MaxSubscribers_set(char* val);
char* cfg_video_igmp_proxy_Enable_get();
int cfg_video_igmp_proxy_Enable_set(char* val);
char* cfg_video_igmp_proxy_RobustnessVariable_get();
int cfg_video_igmp_proxy_RobustnessVariable_set(char* val);
char* cfg_video_igmp_proxy_QuerierVersion_get();
int cfg_video_igmp_proxy_QuerierVersion_set(char* val);
char* cfg_video_igmp_proxy_QueryInterval_get();
int cfg_video_igmp_proxy_QueryInterval_set(char* val);
char* cfg_video_igmp_proxy_QueryResponseInterval_get();
int cfg_video_igmp_proxy_QueryResponseInterval_set(char* val);
char* cfg_video_igmp_proxy_FastLeaveEnable_get();
int cfg_video_igmp_proxy_FastLeaveEnable_set(char* val);
char* cfg_video_igmp_proxy_LastMemberQueryInterval_get();
int cfg_video_igmp_proxy_LastMemberQueryInterval_set(char* val);
char* cfg_video_igmp_proxy_LastMemberQueryCount_get();
int cfg_video_igmp_proxy_LastMemberQueryCount_set(char* val);
char* cfg_video_igmp_proxy_BlockedGroups_get();
int cfg_video_igmp_proxy_BlockedGroups_set(char* val);
char* cfg_video_igmp_proxy_BootcastGroup_get();
int cfg_video_igmp_proxy_BootcastGroup_set(char* val);
char* cfg_video_igmp_proxy_UpstreamNetworkInterface_get();
int cfg_video_igmp_proxy_UpstreamNetworkInterface_set(char* val);
char* cfg_video_igmp_proxy_UpstreamIGMPVersion_get();
int cfg_video_igmp_proxy_UpstreamIGMPVersion_set(char* val);
char* cfg_video_igmp_proxy_UnsolicitedReportInterval_get();
int cfg_video_igmp_proxy_UnsolicitedReportInterval_set(char* val);
char* cfg_video_igmp_proxy_LogLevel_get();
int cfg_video_igmp_proxy_LogLevel_set(char* val);
char* cfg_video_igmp_proxy_periodicinform_Enable_get();
int cfg_video_igmp_proxy_periodicinform_Enable_set(char* val);
char* cfg_video_igmp_proxy_periodicinform_Interval_get();
int cfg_video_igmp_proxy_periodicinform_Interval_set(char* val);
char* cfg_video_igmp_proxy_periodicinform_Version_get();
int cfg_video_igmp_proxy_periodicinform_Version_set(char* val);
/*to add here*/
#endif //CAL_CFG_H_
