#! /bin/sh
# zonap start/stop script
### BEGIN INIT INFO
# Provides:          zonap
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     3 4 5
# Default-Stop:      0 2 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO
PATH=/sbin:/bin:/usr/sbin:/usr/bin

DAEMON=/usr/sbin/chilli
RADCONFIG=/usr/sbin/chilli_radconfig
NAME=chilli
DESC=chilli
PIDFILE=/var/run/$NAME.pid
CONFFILE=/tmp/var/run/chilli.conf
TEMPORAL_CONFFILE=/tmp/var/chilli.conf
DEFAULT_CONFFILE=/etc/chilli.conf
DHCPIF=eth0
OUTIF=eth1
NASID=$(ifconfig "$OUTIF" | head -n1 | awk '{print $5}'|sed s/:/-/g)
NASIP=$(ifconfig "$OUTIF" | grep "inet addr" | awk '{print $2}'|tr -d "addr:")
DNS_SERVER1=8.8.8.8
DNS_SERVER2=8.8.8.8
DNS_SERVER1=$(cat /etc/resolv.conf |sed -n 's/nameserver/&/p'|head -n1|awk '{printf $2}')
DNS_SERVER2=$(cat /etc/resolv.conf |sed -n 's/nameserver/&/p'|tail -n1|awk '{printf $2}')
RADIUSSERVER1=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.RadiusServer1)
RADIUSSERVER2=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.RadiusServer2)
RADIUSSECRET=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.RadiusSecret)
DEVICE=$(cat /etc/fon_device)
VERSION=$(cat /etc/fon_version)
REVISION=$(cat /etc/fon_revision)
RADIUSADMUSR=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.Profile)-${DEVICE}-${VERSION}.${REVISION}
RADIUSADMUSR=SRCDTA01-${DEVICE}-${VERSION}.${REVISION}
RADIUSADMPWD=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.ProfilePasswd)

NET=172.17.2.0/24
UAMLISTEN=172.17.2.100
DHCPSTART=101
DHCPEND=116
DNS_SERVER1=$UAMLISTEN
DNS_SERVER2=$UAMLISTEN

LEASE=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.Lease)
USING_CMDSOCK=1
FONAP_NORADAUTH=1
FONAP_NORADACCT=1
WHITELIST=/tmp/var/run/whitelist
WWWDIR=/etc/fon/www

IDLETIMEOUT=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.DefIdleTimeout)

RADIUSRETRY=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.RadiusRetry)
RADIUSSETRYSEC=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.RadiusRetrySec)
RADIUSTIMEOUT=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.RadiusTimeout)
FONAP_TUNNELS=$(/usr/sbin/cmld_client getv Device.Services.X_T-ONLINE-DE_Fon.L2TP-Enable)
FONAP_FONAPI=1

CHILLOUT_OPTS=""
#if [ "$FONAP_TUNNELS" = "true" ]; then
#	CHILLOUT_OPTS="--module=chillout:/tmp/chillout:"
#	# To use RADIUS for auth + acct (leave blank)
#	# To use RADIUS for acct, but not auth
#	if [ $FONAP_NORADAUTH -eq 1 ]; then
#		CHILLOUT_OPTS="$CHILLOUT_OPTS:noradauth"
#		if [ $FONAP_NORADACCT -eq 1 ]; then
#			CHILLOUT_OPTS="$CHILLOUT_OPTS:noradacct"
#		fi
#	fi
#fi

if [ $FONAP_FONAPI -eq 1 ]; then
	CHILLOUT_OPTS="--module=fon-api:/usr/sbin/api-example.sh"
fi

# get the mac address used for this FONAP
#if [ -f /etc/fon_mac ] ; then
#   NASID=`cat /etc/fon_mac`
#fi

OPTS="-c $CONFFILE --dns1=$DNS_SERVER1 --dns2=$DNS_SERVER2 --uamuiport=0 \
--radiusserver1=127.0.0.1 --radiusserver2=127.0.0.1 --radiussecret=$RADIUSSECRET \
--radiusnasid=$NASID --nasip=$NASIP --uamsecret=garrafon --uamanydns --swapoctets \
--dhcpif=$DHCPIF --net=$NET --dhcpstart=$DHCPSTART --dhcpend=$DHCPEND --lease=$LEASE --uamlisten=$UAMLISTEN \
--papalwaysok --pidfile=/var/run/$NAME.pid \
--challengetimeout=0 --challengetimeout2=0 \
--uamdomainfile=$WHITELIST --redirdnsreq --defidletimeout=$IDLETIMEOUT"

# [ "$USING_CHILLOUT" = "1" ] && 
OPTS="$OPTS $CHILLOUT_OPTS"
[ "$USING_CMDSOCK" = "1" ] && OPTS="$OPTS --cmdsock=/var/run/chilli.sock"
[ "$WWWDIR" != "" ] && OPTS="$OPTS --wwwdir=$WWWDIR"

test -f $DAEMON || exit 0
test -f $DEFAULT_CONFFILE || exit 0
test -f $CONFFILE || cp $DEFAULT_CONFFILE $CONFFILE

# check_required
do_reload() {
    [ -f $PIDFILE ] && kill -HUP $(cat $PIDFILE) >/dev/null 2>&1
}

check_alive() {
    if [ ! -f $PIDFILE ]; then
        echo "dead"
        return 0
    fi
    TEST_PID=$(cat $PIDFILE)
    if [ ! -d /proc/$TEST_PID ]; then
        rm $PIDFILE
        echo "dead"
        return 0
    fi
    CANDIDATE=$(cat /proc/$TEST_PID/status | grep Name: | awk '{ print $2 }')
    if [ "$CANDIDATE" = "chilli" ]; then
        echo "alive"
        return 0
    else
        rm $PIDFILE
        echo "dead"
        return 0
    fi
}

parse_whitelist() {
        if [ -s $TEMPORAL_CONFFILE ]; then
		awk '
		BEGIN { buf="" }
		  /^newdomain/ {
		    s=$0
		    sub(/^newdomain /,"",s)
		    n=split(s,array,",");
		    for (i=1;i<=n;i++) {
		      d=array[i]
		      not=0
		      dom=""
		      if (d ~ /^!/) {
		        not = 1
		        d = substr(d,2)
		      }
		      if (d ~ /^\*\./) {
		        dom = "^(.*\\.)?" substr(d,3) "$\n"
		      } else {
		        dom = "^" d "$\n"
		      }
		      if (not) {
		        printf("!%s", dom)
		      } else {
		        buf = buf dom
		      }
		    }
 		 }
		END { printf("%s", buf) }
		' $TEMPORAL_CONFFILE > $WHITELIST
                sed /^newdomain/d -i $TEMPORAL_CONFFILE
        fi
}

radiusconfig() {
        rm -rf $TEMPORAL_CONFFILE
        $RADCONFIG -c /dev/null \
		--radiusserver1="$RADIUSSERVER1" \
                --radiusserver2="$RADIUSSERVER2" \
                --radiussecret="$RADIUSSECRET" \
                --adminuser="$RADIUSADMUSR" \
                --adminpasswd="$RADIUSADMPWD" \
                --radiusnasid="$NASID" \
                --dhcpif=$DHCPIF \
                --uamanydns \
                --swapoctets \
                --radiusretry="$RADIUSRETRY" \
                --radiusretrysec="$RADIUSRETRYSEC" \
                --radiustimeout="$RADIUSTIMEOUT" \
                > $TEMPORAL_CONFFILE

	parse_whitelist

	# Strip some options that this version of chilli
	# will not understand (fix with profiles)
	diff $TEMPORAL_CONFFILE $CONFFILE > /dev/null
	return $?
}

RETVAL=0
prog="chilli"


case "$1" in
    start)
	echo -n "Starting $DESC: "
#	/sbin/modprobe tun >/dev/null 2>&1
#	echo 1 > /proc/sys/net/ipv4/ip_forward
#	iptables -t nat -I POSTROUTING -j MASQUERADE
#	iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        echo $OPTS

	if [ "$DEBUG" != "0" ] ; then
	    $DAEMON $OPTS --debug --fg &
	else
	    $DAEMON $OPTS &
	fi
	RETVAL=$?
	echo "$NAME."
	;;
    
    checkrunning)
#	check=`$DAEMON --test`
	if [ x"$check" != x"$DAEMON already running." ] ; then
            $0 start
	fi
	;;
    
    radconfig)
#      [ -e $MAIN_CONF ] || writeconfig
	radiusconfig
	if [ ! $? -eq 0 ]; then
            echo "radconfig changed."
	    [ -s $TEMPORAL_CONFFILE ] && cp $TEMPORAL_CONFFILE $CONFFILE
	    $0 restart
	fi
	;;
    
    restart)
	$0 stop
	sleep 2
	$0 start
	RETVAL=$?
	;;
    
    stop)
	echo -n "Stopping $DESC: "
        
        check=$(check_alive)
        if [ $check = "alive" ] ; then
            kill $(cat $PIDFILE) > /dev/null 2>&1
            rm -f $PIDFILE
        fi
#        iptables -t nat -D POSTROUTING 1
#        iptables -D FORWARD 1
	
	echo "$NAME."
	;;
    
    reload)
	$0 restart
	;;
    
    force-reload)
	$0 restart
	;;
    condrestart)
	check=`start-stop-daemon --start --exec $DAEMON --test`
	if [ x"$check" != x"$DAEMON already running." ] ; then
	    $0 restart
	    RETVAL=$?
	fi
	;;
    
    status)
	# status chilli
	check=`start-stop-daemon --start --exec $DAEMON --test`
	if [ x"$check" == x"$DAEMON already running." ] ; then
	    RETVAL=1
	fi
	RETVAL=0
	;;
    
    *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|condrestart|status|reload|radconfig}" >&2
	exit 1
	;;
esac

exit 0

