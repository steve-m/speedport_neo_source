diff -ru xl2tpd.old/call.c xl2tpd/call.c
--- xl2tpd.old/call.c	2010-10-27 12:45:50.000000000 +0200
+++ xl2tpd/call.c	2010-10-25 11:52:53.000000000 +0200
@@ -481,12 +481,14 @@
             }
         }
     }
+    /*
     if (c->lac)
     {
         c->lac->c = NULL;
         if (c->lac->redial && (c->lac->rtimeout > 0) && !c->lac->rsched &&
             c->lac->active)
         {
+		l2tp_log (LOG_DEBUG, "Will redial in %d seconds\n", c->lac->rtimeout);
 #ifdef DEBUG_MAGIC
             l2tp_log (LOG_DEBUG, "Will redial in %d seconds\n",
                  c->lac->rtimeout);
@@ -496,7 +498,7 @@
             c->lac->rsched = schedule (tv, magic_lac_dial, c->lac);
         }
     }
-
+    */
     free (c);
 
 }
diff -ru xl2tpd.old/control.c xl2tpd/control.c
--- xl2tpd.old/control.c	2010-10-27 12:45:50.000000000 +0200
+++ xl2tpd/control.c	2010-10-25 11:52:53.000000000 +0200
@@ -1,3 +1,4 @@
+/* vim: set ai tabstop=4 expandtab: */
 /*
  * Layer Two Tunnelling Protocol Daemon
  * Copyright (C) 1998 Adtran, Inc.
@@ -20,6 +21,7 @@
 #include <arpa/inet.h>
 #include <unistd.h>
 #include <stdlib.h>
+#include "chillout.h"
 #include "l2tp.h"
 
 _u16 ppp_crc16_table[256] = {
@@ -59,6 +61,9 @@
 
 int global_serno = 1;
 
+extern int waiting_first_cid;
+extern chillout_t chillout;
+
 struct buffer *new_outgoing (struct tunnel *t)
 {
     /*
@@ -124,7 +129,7 @@
     struct buffer *buf;
     struct tunnel *t;
     struct timeval tv;
-    tv.tv_sec = HELLO_DELAY;
+    tv.tv_sec = gconfig.hello_delay;
     tv.tv_usec = 0;
     t = (struct tunnel *) tun;
     buf = new_outgoing (t);
@@ -592,7 +597,7 @@
             l2tp_log (LOG_DEBUG, "%s: sending SCCCN\n", __FUNCTION__);
         control_xmit (buf);
         /* Schedule a HELLO */
-        tv.tv_sec = HELLO_DELAY;
+        tv.tv_sec = gconfig.hello_delay;
         tv.tv_usec = 0;
 #ifdef DEBUG_HELLO
         l2tp_log (LOG_DEBUG, "%s: scheduling initial HELLO on %d\n", __FUNCTION__,
@@ -605,9 +610,27 @@
 		  ntohs (t->peer.sin_port), t->ourtid, t->tid, t->refme, t->refhim);
         if (t->lac)
         {
+            int cid;
+
             /* This is part of a LAC, so we want to go ahead
                and start an ICRQ now */
-            magic_lac_dial (t->lac);
+            if (magic_lac_dial (t->lac, &cid)) {
+                l2tp_log(LOG_NOTICE, "Error calling magic_call_dial");
+                if (waiting_first_cid == 0) {
+                    l2tp_log(LOG_NOTICE, "waiting_first_cid = 0????");
+                } else {
+                    chillout_write(chillout, 0, "error calling magic_call_dial");
+                    waiting_first_cid = 0;
+                } 
+            } else {
+                if (waiting_first_cid == 0) {
+                    l2tp_log(LOG_NOTICE, "waiting_first_cid = 0????");
+                } else {
+                    chillout_write(chillout, 0, "tunnel created");
+                    l2tp_log(LOG_NOTICE, "tunnel created sent to chilloutd\n");
+                    waiting_first_cid = 0;
+                }
+            }
         }
         break;
     case SCCCN:
@@ -631,7 +654,7 @@
 		  ntohs (t->peer.sin_port), t->ourtid, t->tid, t->refme, t->refhim,
 		  t->lns->entname);
         /* Schedule a HELLO */
-        tv.tv_sec = HELLO_DELAY;
+        tv.tv_sec = gconfig.hello_delay;
         tv.tv_usec = 0;
 #ifdef DEBUG_HELLO
         l2tp_log (LOG_DEBUG, "%s: scheduling initial HELLO on %d\n", __FUNCTION__,
@@ -819,8 +842,14 @@
 		  "Call established with %s, Local: %d, Remote: %d, Serial: %d (ref=%u/%u)\n",
 		  IPADDY (t->peer.sin_addr), c->ourcid, c->cid,
 		  c->serno, t->refme, t->refhim);
+        if (!waiting_first_cid) {
+            l2tp_log(LOG_NOTICE, "About to send call id to chillout %d (2)\n", c->ourcid);
+            chillout_write(chillout, 0, "cid %d", c->ourcid);
+            chillout_write(chillout, 0, "ok");
+        }
         control_xmit (buf);
         po = NULL;
+    	po = add_opt (po, "hide-password");
         po = add_opt (po, "passive");
         po = add_opt (po, "-detach");
         if (c->lac)
@@ -874,13 +903,28 @@
                 /* clear memory used for password, paranoid?  */
                 for (i = 0; i < STRLEN; i++)
                     c->lac->password[i] = '\0';
-
+                po = add_opt (po, "chillout");
+                po = add_opt (po, "/tmp/chillout");
+                if (c->lac->chilloutmac[0]) {
+                    po = add_opt (po, "chilloutmac");
+                    po = add_opt (po, c->lac->chilloutmac);
+                }
+/*                po = add_opt (po,  */
                 po = add_opt (po, "plugin");
                 po = add_opt (po, "passwordfd.so");
                 po = add_opt (po, "passwordfd");
                 snprintf (passwdfd_buf, 32, "%d", pppd_passwdfd[0]);
                 po = add_opt (po, passwdfd_buf);
             }
+/*
+            if (c->lac->password[0])
+            {
+                po = add_opt (po, "password");
+                po = add_opt (po, c->lac->password); 
+                for (i = 0; i < STRLEN; i++)
+                     c->lac->password[i] = '\0';
+            }
+*/
             if (c->lac->pppoptfile[0])
             {
                 po = add_opt (po, "file");
diff -ru xl2tpd.old/file.c xl2tpd/file.c
--- xl2tpd.old/file.c	2010-10-27 12:45:50.000000000 +0200
+++ xl2tpd/file.c	2010-10-25 11:52:53.000000000 +0200
@@ -47,6 +47,9 @@
     gconfig.packet_dump = 0;
     gconfig.debug_tunnel = 0;
     gconfig.debug_state = 0;
+    gconfig.hello_delay = DEFAULT_HELLO_DELAY;
+    gconfig.max_retries = DEFAULT_MAX_RETRIES;
+    gconfig.retransmission_delay = DEFAULT_RETRANSMISSION_DELAY;
     lnslist = NULL;
     laclist = NULL;
     deflac = (struct lac *) malloc (sizeof (struct lac));
@@ -1001,6 +1004,22 @@
     }
     return 0;
 }
+/* pm: new callbacks */
+int set_hello_delay(char *word, char *value, int context, void *item)
+{
+        set_int (word, value, &(((struct global *) item)->hello_delay));
+	return 0;
+}
+int set_max_retries(char *word, char *value, int context, void *item)
+{
+        set_int (word, value, &(((struct global *) item)->max_retries));
+	return 0;
+}
+int set_retransmission_delay(char *word, char *value, int context, void *item)
+{
+        set_int (word, value, &(((struct global *) item)->retransmission_delay));
+	return 0;
+}
 
 int set_lns (char *word, char *value, int context, void *item)
 {
@@ -1413,5 +1432,8 @@
     {"tunnel rws", &set_rws},
     {"flow bit", &set_flow},
     {"challenge", &set_challenge},
+    {"hello-delay", &set_hello_delay},
+    {"max-retries", &set_max_retries},
+    {"retransmission-delay", &set_retransmission_delay },
     {NULL, NULL}
 };
diff -ru xl2tpd.old/file.h xl2tpd/file.h
--- xl2tpd.old/file.h	2010-10-27 12:45:50.000000000 +0200
+++ xl2tpd/file.h	2010-10-25 11:52:53.000000000 +0200
@@ -59,6 +59,8 @@
 #define ALT_DEFAULT_CONFIG_FILE "/etc/l2tp/l2tpd.conf"
 #define DEFAULT_PID_FILE "/var/run/xl2tpd.pid"
 
+#define DEFAULT_CHILLOUT_SOCKET "/tmp/chillout"
+
 /* Definition of an LNS */
 struct lns
 {
@@ -112,6 +114,9 @@
     unsigned int remoteaddr;    /* Force remote address to this */
     char authname[STRLEN];      /* Who we authenticate as */
     char password[STRLEN];      /* Password to authenticate with */
+    char chilloutmac[STRLEN]; 	/* mac address of the client (not that we 
+                                   care that much, but it's needed to send 
+				   it to chillout */
     char peername[STRLEN];      /* Force peer name to this */
     char hostname[STRLEN];      /* Hostname to report */
     char entname[STRLEN];       /* Name of this entry */
@@ -144,6 +149,7 @@
     char altconfigfile[STRLEN]; /* File containing configuration info */
     char pidfile[STRLEN];       /* File containing the pid number*/
     char controlfile[STRLEN];   /* Control file name (named pipe) */
+    char chilloutsocket[256];	/* Control socket for chillout */
     int daemon;                 /* Use daemon mode? */
     int accesscontrol;          /* Use access control? */
     int forceuserspace;         /* Force userspace? */
@@ -153,6 +159,9 @@
     int debug_tunnel;		/* Print tunnel debugging info? */
     int debug_state;		/* Print FSM debugging info? */
     int ipsecsaref;
+    int hello_delay;
+    int max_retries;
+    int retransmission_delay; 
 };
 
 extern struct global gconfig;   /* Global configuration options */
diff -ru xl2tpd.old/l2tp.h xl2tpd/l2tp.h
--- xl2tpd.old/l2tp.h	2010-10-27 12:45:50.000000000 +0200
+++ xl2tpd/l2tp.h	2010-10-25 11:52:53.000000000 +0200
@@ -47,7 +47,7 @@
 #define DEF_MAX_TUNNELS 32      /* By default only allow this many
                                    tunnels to exist */
 
-#define HELLO_DELAY 60          /* How often to send a Hello message */
+#define DEFAULT_HELLO_DELAY 60          /* How often to send a Hello message */
 
 struct control_hdr
 {
@@ -96,6 +96,7 @@
 #else
 #define DEFAULT_MAX_RETRIES 95   /* give us more time to debug */
 #endif
+#define DEFAULT_RETRANSMISSION_DELAY 1
 
 #define DEFAULT_RWS_SIZE   4    /* Default max outstanding 
                                    control packets in queue */
@@ -218,7 +219,7 @@
 extern int switch_io;           /* jz */
 extern int control_fd;
 extern int start_pppd (struct call *c, struct ppp_opts *);
-extern void magic_lac_dial (void *);
+extern int magic_lac_dial (void *, int *);
 extern int get_entropy (unsigned char *, int);
 
 #ifndef MIN
diff -ru xl2tpd.old/Makefile xl2tpd/Makefile
--- xl2tpd.old/Makefile	2010-10-27 12:45:50.000000000 +0200
+++ xl2tpd/Makefile	2010-10-25 11:52:53.000000000 +0200
@@ -67,9 +67,10 @@
 
 FFLAGS= -DIP_ALLOCATION
 
-CFLAGS+= $(DFLAGS) -O2 -fno-builtin -Wall -DSANITY $(OSFLAGS) $(FFLAGS)
-HDRS=l2tp.h avp.h misc.h control.h call.h scheduler.h file.h aaa.h md5.h
-OBJS=xl2tpd.o pty.o misc.o control.o avp.o call.o network.o avpsend.o scheduler.o file.o aaa.o md5.o
+# CFLAGS+= $(DFLAGS) -O2 -fno-builtin -Wall -DSANITY $(OSFLAGS) $(FFLAGS)
+CFLAGS+= $(DFLAGS) -fno-builtin -Wall -DSANITY $(OSFLAGS) $(FFLAGS) -DLINUX
+HDRS=l2tp.h avp.h misc.h control.h call.h scheduler.h file.h aaa.h md5.h chillout.h
+OBJS=xl2tpd.o pty.o misc.o control.o avp.o call.o network.o avpsend.o scheduler.o file.o aaa.o md5.o chillout.o log.o
 SRCS=${OBJS:.o=.c} ${HDRS}
 #LIBS= $(OSLIBS) # -lefence # efence for malloc checking
 EXEC=xl2tpd
diff -ru xl2tpd.old/network.c xl2tpd/network.c
--- xl2tpd.old/network.c	2010-10-27 12:45:50.000000000 +0200
+++ xl2tpd/network.c	2010-10-25 11:52:53.000000000 +0200
@@ -1,3 +1,4 @@
+/* vim: set ai tabstop=4 expandtab: */
 /*
  * Layer Two Tunnelling Protocol Daemon
  * Copyright (C) 1998 Adtran, Inc.
@@ -24,6 +25,7 @@
 #include <sys/ioctl.h>
 #include "l2tp.h"
 #include "ipsecmast.h"
+#include "chillout.h"
 
 char hostname[256];
 struct sockaddr_in server, from;        /* Server and transmitter structs */
@@ -32,6 +34,26 @@
 int kernel_support;             /* Kernel Support there or not? */
 #endif
 
+chillout_t chillout = NULL;           /* pm */
+extern int waiting_first_cid;           /* pm */
+extern int lac_hangup(int cid);         /* pm */
+
+/* chillout callbacks prototipes */
+static int callback_tunnel(chillout_t co, void *data, int argc, char **argv);
+static int callback_session(chillout_t co, void *data, int argc, char **argv);
+static int callback_show(chillout_t co, void *data, int argc, char **argv);
+static int callback_default(chillout_t co, void *data, int argc, char **argv);
+
+static struct callback global_callbacks[] = {
+    { "xl2tpd", "tunnel", 0, callback_tunnel },
+    { "xl2tpd", "session", 0, callback_session },
+    { "xl2tpd", "show", 0, callback_show },
+    { "xl2tpd", "default", 0, callback_default },
+    { "", "", 0, NULL }
+};
+
+/* defined in xl2tpd.c */
+extern struct tunnel *l2tp_call (char *host, int port, struct lac *lac, struct lns *lns);
 
 int init_network (void)
 {
@@ -101,6 +123,25 @@
     arg |= O_NONBLOCK;
     fcntl (server_socket, F_SETFL, arg);
     gconfig.port = ntohs (server.sin_port);
+    if ((chillout = chillout_init(gconfig.chilloutsocket, "xl2tpd", NULL)) == NULL) {
+        l2tp_log(LOG_ERR, "Error calling chillout_init(%s, \"xl2tpd\", NULL)\n", 
+            gconfig.chilloutsocket);
+    	return 1;
+    } else {
+        char buffer[256];
+
+        chillout_write(chillout, CHILLOUT_WRITE_SOCK, "show version");
+    	chillout->callbacks = global_callbacks;
+	    if (chillout_read(chillout, CHILLOUT_WRITE_SOCK, buffer)) {
+		    l2tp_log(LOG_ERR, "error reading from chillout");
+    	}
+	    if (buffer[strlen(buffer) - 1] == '\n') {
+		    buffer[strlen(buffer) - 1] = '\0';
+    	}
+    	l2tp_log(LOG_INFO, "Chillout subsystem loaded. Server version %s\n", buffer);
+    	chillout_read(chillout, CHILLOUT_WRITE_SOCK, buffer);
+    }
+    chillout->callbacks = global_callbacks;
     return 0;
 }
 
@@ -202,7 +243,7 @@
             return;
         }
     }
-    if (buf->retries > DEFAULT_MAX_RETRIES)
+    if (buf->retries > gconfig.max_retries)
     {
         /*
            * Too many retries.  Either kill the tunnel, or
@@ -217,6 +258,15 @@
                      t->ourtid);
                 t->self->needclose = 0;
                 t->self->closing = -1;
+                /* 
+        		 * pm: notify awaiting chilloutd of the horrisonous failure of 
+		         * the tunnel lift
+        		 */
+                if (waiting_first_cid) {
+                    l2tp_log(LOG_NOTICE, "waiting first cid. Notifiying chilloutd\n");
+                    chillout_write(chillout, 0, "error tunnel");
+                    waiting_first_cid = 0;
+                }
             }
             else
             {
@@ -235,7 +285,7 @@
         /*
            * FIXME:  How about adaptive timeouts?
          */
-        tv.tv_sec = 1;
+        tv.tv_sec = gconfig.retransmission_delay;
         tv.tv_usec = 0;
         schedule (tv, control_xmit, buf);
 #ifdef DEBUG_CONTROL_XMIT
@@ -356,6 +406,11 @@
 	FD_SET (control_fd, readfds);
 	if (control_fd > max)
 		max = control_fd;
+    if (chillout != NULL) {
+        FD_SET(chillout->readsock, readfds);
+        if (chillout->readsock > max)
+            max = chillout->readsock;
+    }
 	return max;
 }
 
@@ -367,7 +422,7 @@
      */
     struct sockaddr_in from, to;
     unsigned int fromlen, tolen;
-    int tunnel, call;           /* Tunnel and call */
+    int tunnel, call, selret;           /* Tunnel and call */
     int recvsize;               /* Length of data received */
     struct buffer *buf;         /* Payload buffer */
     struct call *c, *sc;        /* Call to send this off to */
@@ -385,6 +440,7 @@
 
     tunnel = 0;
     call = 0;
+    selret = 0;
 
     for (;;)
     {
@@ -392,12 +448,34 @@
         tv.tv_sec = 1;
         tv.tv_usec = 0;
         schedule_unlock ();
-        select (max + 1, &readfds, NULL, NULL, NULL);
+        selret = select (max + 1, &readfds, NULL, NULL, NULL);
+        if (selret < 0) {
+            if (errno == EINTR) {
+                continue;
+            }
+            l2tp_log(LOG_ERR, "%s: select returned %d: %s\n", __FUNCTION__, selret, strerror(errno));
+            continue;
+        }
+        /* if we used that tv, in the select call, and select returned 0
+         * that would mean timeout has passed without data
+         */
         schedule_lock ();
         if (FD_ISSET (control_fd, &readfds))
         {
             do_control ();
         }
+        if ((chillout != NULL) && FD_ISSET(chillout->readsock, &readfds)) {
+            int ret;
+            ret  = chillout_accept(chillout);
+            if (ret != 0) {
+                l2tp_log(LOG_ERR, "chillout_accept() failed\n");
+                if (ret == CHILLOUT_DISCONNECTED) {
+                    FD_CLR(chillout->readsock, &readfds);
+                    chillout_finish(chillout);
+                    chillout = NULL;
+                }
+            }
+        }
         if (FD_ISSET (server_socket, &readfds))
         {
             /*
@@ -608,4 +686,181 @@
         }
     }
 
+    if (chillout) {
+        chillout_finish(chillout);
+        l2tp_log(LOG_NOTICE, "Chillout subsystem finished");
+    }
+}
+
+/*
+ * callback_tunnel
+ *
+ * tunnel up <lac> 
+ * <- tid <tunnel_id>
+ * <- ok
+ * tunnel down <lac>
+ * <- ok
+ * OR
+ * <- error reason
+ * TODO
+ */
+#define TUNNEL_NEW 0
+#define TUNNEL_UP 1
+#define TUNNEL_DOWN 2
+extern int switch_io;     /* defined in xl2tpd.c */
+static int callback_tunnel(chillout_t co, void *data, int argc, char **argv)
+{
+    int mode;
+    struct tunnel *tunnel;
+
+    if (argc != 3) {
+        chillout_write(co, 0, "error argc %d", argc);
+        return 1;
+    }
+    if (!strcmp(argv[1], "up")) {
+        mode = TUNNEL_UP;
+    } else if (!strcmp(argv[1], "down")) {
+        mode = TUNNEL_DOWN;
+    } else {
+        chillout_write(co, 0, "error unknown argument %s", argv[1]);
+        return 1;
+    }
+    if (mode == TUNNEL_UP) {
+        tunnel = l2tp_call(argv[2], UDP_LISTEN_PORT, NULL, NULL);
+        if (tunnel == NULL) {
+            chillout_write(co, 0, "error creating tunnel for LAC %s", argv[2]);
+            return 1;
+        } else {
+            chillout_write(co, 0, "tid %d", tunnel->tid);
+            return 0;
+        }
+    } else {
+        chillout_write(co, 0, "error todo"); 
+    }
+    return 1;
+}
+
+/*
+ * callback_session
+ *
+ * session create <lac> <username> <password> <ip_address> <mac>
+ * <- session <ppp device> <sessionid>
+ * <- ok
+ * session delete <sessionid>
+ * <- ok 
+ * OR
+ * <- error <reason>
+ * TODO
+ */
+#define SESSION_CREATE 1
+#define SESSION_DELETE 2
+static int callback_session(chillout_t co, void *data, int argc, char **argv)
+{
+    int mode, ret, cid, first;
+    struct lac *lac;
+
+    if (!strcmp(argv[1], "create")) {
+        mode = SESSION_CREATE;
+    } else if (!strcmp(argv[1], "delete")) {
+        mode = SESSION_DELETE;
+    }  else {
+        chillout_write(co, 0, "error unknown argument %s", argv[1]);
+        return CHILLOUT_ERROR;
+    }
+
+    if ((mode == SESSION_CREATE) && (argc != 6)) {
+        chillout_write(co, 0, "error argc %d", argc);
+        return CHILLOUT_ERROR;
+    } else if ((mode == SESSION_DELETE) && (argc != 3)) {
+        chillout_write(co, 0, "error argc %d", argc);
+        return CHILLOUT_ERROR;
+    }
+
+    if (mode == SESSION_CREATE) {
+        switch_io = 1;
+        lac = laclist;
+        while (lac && strcasecmp(lac->entname, argv[2]))
+            lac = lac->next;
+        if (!lac) {
+            chillout_write(co, 0, "error lac %s not found", argv[2]);
+            return CHILLOUT_ERROR;
+        }
+        strncpy (lac->authname, argv[3], STRLEN);
+        strncpy (lac->password, argv[4], STRLEN);
+        strncpy (lac->chilloutmac, argv[5], STRLEN);
+
+        lac->active = -1;
+        lac->rtries = 0;
+        if (!lac->c) {
+            l2tp_log(LOG_DEBUG, "%s: This is the first call over this LAC (session %s)\n",
+                __FUNCTION__, argv[1]);
+            /* chillout_write(co, 0, "tunnel created"); */
+            first = 1;
+        } else {
+            l2tp_log(LOG_DEBUG, "%s: This is not the first call over this LAC (session %s)\n", 
+                __FUNCTION__, argv[1]);
+            first = 0;
+        }
+        ret = magic_lac_dial(lac, &cid);
+        if (ret != 0) {
+            l2tp_log(LOG_DEBUG, "%s: error %d dialing LAC %s\n", __FUNCTION__,
+                ret, argv[2]);
+            chillout_write(co, 0, "error %d dialing LAC %s\n", ret, argv[2]);
+            return CHILLOUT_ERROR;
+        } else {
+            if (first) {
+                if (waiting_first_cid == 0) {
+                    l2tp_log(LOG_DEBUG, "%s: very quick answer!\n", __FUNCTION__); 
+                }
+                return CHILLOUT_NOOK;
+            }
+            return CHILLOUT_NOOK;
+        }
+    } else if (mode == SESSION_DELETE) {
+        cid = atoi(argv[2]);
+        l2tp_log(LOG_DEBUG, "%s: Attempting to hangup session %d\n", __FUNCTION__, cid);
+        /* TODO: lac_hangup seems to left sessions around until the last one... */
+        if (lac_hangup(cid)) {
+            chillout_write(chillout, 0, "error no such session %d", cid);
+            return CHILLOUT_ERROR;
+        }
+        return 0;
+    }
+    return 0;
+}
+
+/*
+ * callback_show
+ *
+ * show tunnel <tid>
+ *  <print tunnel data>
+ * show calls
+ *  <list of sessions (calls)>
+ *
+ */
+static int callback_show(chillout_t co, void *data, int argc, char **argv)
+{
+    struct tunnel *t = tunnels.head;
+    struct call *c;
+
+    if (!strcmp(argv[1], "calls")) {
+        if ((tunnels.count == 0) || (t == NULL)) {
+            chillout_write(co, 0, "no tunnel");
+            return 0;
+        }
+        c = t->call_head;
+        while(c != NULL) {
+            if (c->lac != NULL) {
+                chillout_write(co, 0, "call id %d", c->ourcid);
+            }
+            c = c->next;
+        }
+    }
+    return 0;
+}
+/* callback_default */
+static int callback_default(chillout_t co, void *data, int argc, char **argv)
+{
+    chillout_write(co, 0, "error unknown token %s", argv[0]); 
+    return 1;
 }
diff -ru xl2tpd.old/xl2tpd.c xl2tpd/xl2tpd.c
--- xl2tpd.old/xl2tpd.c	2010-10-27 12:45:50.000000000 +0200
+++ xl2tpd/xl2tpd.c	2010-10-25 11:52:53.000000000 +0200
@@ -1,3 +1,4 @@
+/* vim: set ai tabstop=4 expandtab: */
 /*
  * Layer Two Tunnelling Protocol Daemon
  * Copyright (C) 1998 Adtran, Inc.
@@ -57,6 +58,8 @@
 char *dial_no_tmp;              /* jz: Dialnumber for Outgoing Call */
 int switch_io = 0;              /* jz: Switch for Incoming or Outgoing Call */
 
+int waiting_first_cid = 0;             /* pm: just embarrased */ 
+
 static void open_controlfd(void);
 
 void init_tunnel_list (struct tunnel_list *t)
@@ -401,13 +404,23 @@
         stropt[pos] = NULL;
     }
 
-#ifdef DEBUG_PPPD
-    l2tp_log (LOG_DEBUG, "%s: I'm running: \n", __FUNCTION__);
-    for (x = 0; stropt[x]; x++)
+/* #ifdef DEBUG_PPPD */
+    /*
     {
-        l2tp_log (LOG_DEBUG, "\"%s\" \n", stropt[x]);
-    };
-#endif
+        char buffer[1024];
+        buffer[0] = '\0';
+        int x;
+ 
+        for (x = 0; stropt[x]; x++)
+        {
+            strcat(buffer, stropt[x]);
+            strcat(buffer, " ");
+        };
+        l2tp_log (LOG_DEBUG, "%s: I'm running: %s\n", __FUNCTION__, buffer);
+    }
+    */
+    l2tp_log(LOG_DEBUG, "%s: launching pppd\n", __FUNCTION__);
+/* #endif */
 #ifdef __uClinux__
     c->pppd = vfork ();
 #else 
@@ -621,33 +634,40 @@
     return tmp->container;
 }
 
-void magic_lac_tunnel (void *data)
+int magic_lac_tunnel (void *data)
 {
     struct lac *lac;
+    struct tunnel *tunnel;
+
     lac = (struct lac *) data;
     if (!lac)
     {
         l2tp_log (LOG_WARNING, "%s: magic_lac_tunnel: called on NULL lac!\n",
              __FUNCTION__);
-        return;
+        return 1;
     }
     if (lac->lns)
     {
         /* FIXME: I should try different LNS's if I get failures */
-        l2tp_call (lac->lns->hostname, lac->lns->port, lac, NULL);
-        return;
+        tunnel = l2tp_call (lac->lns->hostname, lac->lns->port, lac, NULL);
+        if (tunnel == NULL)
+            return 1;
+        return 0;
     }
     else if (deflac && deflac->lns)
     {
-        l2tp_call (deflac->lns->hostname, deflac->lns->port, lac, NULL);
-        return;
+        tunnel = l2tp_call (deflac->lns->hostname, deflac->lns->port, lac, NULL);
+        if (tunnel == NULL)
+            return 1;
+        return 0;
     }
     else
     {
         l2tp_log (LOG_WARNING, "%s: Unable to find hostname to dial for '%s'\n",
              __FUNCTION__, lac->entname);
-        return;
+        return 1;
     }
+    return 1;
 }
 
 struct call *lac_call (int tid, struct lac *lac, struct lns *lns)
@@ -685,39 +705,53 @@
     return NULL;
 }
 
-void magic_lac_dial (void *data)
+int magic_lac_dial (void *data, int *cid)
 {
+    int ret;
     struct lac *lac;
+    struct call *call;
+
     lac = (struct lac *) data;
     if (!lac->active)
     {
         l2tp_log (LOG_DEBUG, "%s: LAC %s not active", __FUNCTION__, lac->entname);
-        return;
+        return 1;
     }
     lac->rsched = NULL;
     lac->rtries++;
     if (lac->rmax && (lac->rtries > lac->rmax))
     {
         l2tp_log (LOG_INFO, "%s: maximum retries exceeded.\n", __FUNCTION__);
-        return;
+        return 2;
     }
     if (!lac)
     {
         l2tp_log (LOG_WARNING, "%s : called on NULL lac!\n", __FUNCTION__);
-        return;
+        return 3;
     }
     if (!lac->t)
     {
 #ifdef DEGUG_MAGIC
         l2tp_log (LOG_DEBUG, "%s : tunnel not up!  Connecting!\n", __FUNCTION__);
 #endif
-        magic_lac_tunnel (lac);
-        return;
-    }
-    lac_call (lac->t->ourtid, lac, NULL);
+        waiting_first_cid = 1;
+        l2tp_log (LOG_DEBUG, "%s : tunnel not up!  Connecting!\n", __FUNCTION__);
+        ret = magic_lac_tunnel (lac);
+        if (ret != 0) {
+            l2tp_log(LOG_DEBUG, "%s: magic_lac_tunnel() returns %d", __FUNCTION__, ret);
+            return ret;
+        }
+        return 0;
+    }
+    call = lac_call (lac->t->ourtid, lac, NULL);
+    if (call == NULL)
+        return 1;
+    if (cid != NULL)
+        *cid = call->ourcid;
+    return 0;
 }
 
-void lac_hangup (int cid)
+int lac_hangup (int cid)
 {
     struct tunnel *t = tunnels.head;
     struct call *tmp;
@@ -734,14 +768,14 @@
                 strcpy (tmp->errormsg, "Goodbye!");
 /*                                    tmp->needclose = -1; */
                 kill (tmp->pppd, SIGTERM);
-                return;
+                return 0;
             }
             tmp = tmp->next;
         }
         t = t->next;
     };
     l2tp_log (LOG_DEBUG, "%s : No such call %d to hang up.\n", __FUNCTION__, cid);
-    return;
+    return 1;
 }
 
 void lac_disconnect (int tid)
@@ -908,7 +942,7 @@
                 if (password != NULL)
                     strncpy (lac->password, password, STRLEN);
                 if (!lac->c)
-                magic_lac_dial (lac);
+                    magic_lac_dial (lac, NULL);
                 else {
                 l2tp_log (LOG_DEBUG,
                           "Session '%s' already active!\n", lac->entname);
@@ -948,7 +982,7 @@
                 lac->active = -1;
                 lac->rtries = 0;
                 if (!lac->c)
-                    magic_lac_dial (lac);
+                    magic_lac_dial (lac, NULL);
                 else
                     l2tp_log (LOG_DEBUG, "Session '%s' already active!\n",
                               lac->entname);
@@ -1028,7 +1062,7 @@
 
 void usage(void) {
     printf("\nxl2tpd version:  %s\n",SERVER_VERSION);
-    printf("Usage: xl2tpd [-c <config file>] [-s <secret file>] [-p <pid file>]  \n             [-C <control file>] [-D]\n");
+    printf("Usage: xl2tpd [-c <config file>] [-s <secret file>] [-p <pid file>]  \n             [-C <control file>] [-t <chillout socket>] [-D]\n");
     printf("\n");
     exit(1);
 }
@@ -1044,6 +1078,7 @@
     memset(gconfig.configfile,0,STRLEN);
     memset(gconfig.pidfile,0,STRLEN);
     memset(gconfig.controlfile,0,STRLEN);
+    memset(gconfig.chilloutsocket,0,STRLEN);
     strncpy(gconfig.altauthfile,ALT_DEFAULT_AUTH_FILE,
             sizeof(gconfig.altauthfile) - 1);
     strncpy(gconfig.altconfigfile,ALT_DEFAULT_CONFIG_FILE,
@@ -1056,6 +1091,7 @@
             sizeof(gconfig.pidfile) - 1);
     strncpy(gconfig.controlfile,CONTROL_PIPE,
             sizeof(gconfig.controlfile) - 1);
+    strcpy(gconfig.chilloutsocket, DEFAULT_CHILLOUT_SOCKET);
     gconfig.ipsecsaref = 0;
 
     for (i = 1; i < argc; i++) {
@@ -1074,6 +1110,13 @@
         else if (! strncmp(argv[i],"-D",2)) {
             gconfig.daemon=0;
         }
+        else if (! strncmp(argv[i], "-l",2)) {
+            if(++i == argc)
+                usage();
+            else
+                strncpy(gconfig.chilloutsocket, argv[i],
+                        sizeof(gconfig.chilloutsocket) - 1);
+        }
         else if (! strncmp(argv[i],"-s",2)) {
             if(++i == argc)
                 usage();
@@ -1252,7 +1295,7 @@
 #endif
             lac->active = -1;
             switch_io = 1;      /* If we're a LAC, autodials will be ICRQ's */
-            magic_lac_dial (lac);
+            magic_lac_dial (lac, NULL);
         }
         lac = lac->next;
     }
